Descriptor:
  Name: DLPTriageAlerts
  DisplayName: Purview - Triage DLP Alerts
  Description: Data Security skills to analyze DLP alerts and user activity patterns across Microsoft 365 services including Teams, Email, and File sharing.

SkillGroups:
  - Format: KQL
    Skills:
      - Name: DLPTopThreeUsersOverview
        DisplayName: Get Top Users Triggering DLP Alerts
        Description: This KQL query analyzes Microsoft Data Loss Prevention (DLP) alerts, identifying the top 3 users with the most significant data sharing risks by calculating total alerts, severity levels, and critically, the percentage of alerts involving external data sharing. By breaking down alerts across email, file, and Teams platforms with an external sharing risk indicator, the query provides security teams a precise, actionable overview of potential data leakage incidents within a 24 hour period. The external percentage metric specifically highlights users with a higher proportion of external data interactions, enabling targeted risk mitigation strategies.
        Settings:
          Target: Defender
          Template: |-
            let timerange = 1d;
            // Start with CloudAppEvents for DLP alerts
            CloudAppEvents
            | where Timestamp > ago(timerange)
            | extend RawData = parse_json(RawEventData)
            | where RawData.Category == "DataLossPrevention"
            | where RawData.Operation == "AlertTriggered"
            | extend DLPAlertId = tostring(RawData.AlertId)
            // Parse the Data field which contains DLP-specific info
            | extend Data = parse_json(tostring(RawData.Data))
            | extend UserPrincipalName = tostring(Data.f3u)  // from field
            | extend MessageType = case(
                RawData.Workload == "Exchange", "mailMessage",
                RawData.Workload == "SharePoint" or RawData.Workload == "OneDrive", "file",
                "other")
            | extend Severity = tostring(RawData.Severity)
            // Continue with the summarization logic
            | summarize 
                AlertCount=count(),
                EmailAlerts=countif(MessageType == "mailMessage"),
                FileAlerts=countif(MessageType == "file"),
                TeamsAlerts=countif(RawData.Name has "Teams"),
                ExternalCount=countif(Data.dmc has "IncludeExternalUsers")
                by UserPrincipalName, Severity
            // Rest of the aggregation remains the same
            | summarize 
                AlertsByUser = make_bag(pack(Severity, AlertCount)),
                EmailAlerts = sum(EmailAlerts),
                FileAlerts = sum(FileAlerts),
                TeamsAlerts = sum(TeamsAlerts),
                ExternalCount = sum(ExternalCount),
                TotalAlerts = sum(AlertCount)
                by UserPrincipalName
            | extend 
                HighAlerts = tolong(AlertsByUser.High),
                MediumAlerts = tolong(AlertsByUser.Medium),
                LowAlerts = tolong(AlertsByUser.Low),
                ExternalPercentage = round((ExternalCount * 100.0 / TotalAlerts), 2)
            | project 
                UserPrincipalName,
                TotalAlerts,
                HighAlerts=coalesce(HighAlerts,0),
                MediumAlerts=coalesce(MediumAlerts,0),
                LowAlerts=coalesce(LowAlerts,0),
                EmailAlerts,
                FileAlerts,
                TeamsAlerts,
                ExternalCount,
                ExternalPercentage
            | top 3 by TotalAlerts desc

      - Name: DLPAlertDetailsWithPurviewLink
        DisplayName: Get Detailed DLP Alert Info with Purview Alert URL
        Description: This query retrieves detailed information about DLP alerts, including alert ID, policy name, severity, user details, and generates a Purview URL for quick navigation.
        Inputs:
          - Name: UPN
            Description: UPN of the user to search
            Required: true   
        Settings:
          Target: Defender          
          Template: |-
            let timerange = 1d; 
            let searchuser = "{{UPN}}";
            CloudAppEvents 
            | where Timestamp > ago(timerange) 
            | extend RawData = parse_json(RawEventData) 
            | where RawData.Category == "DataLossPrevention" 
            | where RawData.Operation == "AlertTriggered" 
            | extend DataJson = parse_json(tostring(RawData.Data))
            | extend  
                User = tostring(DataJson.f3u), 
                Subject = tostring(DataJson.von), 
                To = tostring(DataJson.["To"]), 
                From = tostring(DataJson.mfrm), 
                Workload = tostring(DataJson.wl) 
            | where User == searchuser
            | project  
                Timestamp, 
                User, 
                Workload,
                PolicyName = tostring(RawData.Name), 
                Severity = tostring(RawData.Severity), 
                Subject, 
                PurviewURL = strcat("https://purview.microsoft.com/datalossprevention/alertspage/fullpage?tid=", tostring(RawEventData.OrganizationId), "&alertsviewid=overview&id=", tostring(RawData.AlertId))
            | sort by User desc

      - Name: DLPAlertsSensitiveInfoTypes
        DisplayName: DLP Alerts with Sensitive Information Types
        Description: This query retrieves detailed DLP events for a specific user over the past 24 hours, highlighting sensitive information types, detection confidence, impacted files or items, and triggered policies across workloads. It provides security analysts with actionable insights to investigate and mitigate potential data leakage incidents effectively.
        Inputs:
          - Name: UPN
            Description: User UPN
            Required: true       
        Settings:
          Target: Defender
          Template: |-
            let timerange = 1d;
            let searchuser = "{{UPN}}";
            // First get DLP events
            CloudAppEvents
            | where Timestamp > ago(timerange)
            | extend RawData = parse_json(RawEventData)
            | where RawData.Operation =~ "DLPRuleMatch"
            | extend 
                UserPrincipalName = tostring(RawData.UserId),
                PolicyDetails = RawData.PolicyDetails[0],
                Workload = tostring(RawData.Workload),
                ObjectId = tostring(RawData.ObjectId)  
            | where UserPrincipalName == searchuser
            | mv-expand Rules = PolicyDetails.Rules
            | mv-expand SensitiveInfo = Rules.ConditionsMatched.SensitiveInformation
            | where SensitiveInfo != ""
            | project 
                DLPTime = Timestamp,
                UserPrincipalName,
                ObjectId,
                SensitiveType = tostring(SensitiveInfo.SensitiveInformationTypeName),
                Confidence = toint(SensitiveInfo.Confidence),
                DetectionCount = toint(SensitiveInfo.Count),
                PolicyName = tostring(PolicyDetails.PolicyName),
                Workload;
