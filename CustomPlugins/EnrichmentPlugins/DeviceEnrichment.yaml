Descriptor:
  Name: Device Enrichment Skills
  DisplayName: Device Enrichment Skills
  Description: A set of KQL-based skills designed to enrich device-related data in Microsoft Defender and Sentinel. These skills provide insights into device vulnerabilities, logon events, exposure levels, and event timelines, empowering security analysts to monitor, investigate, and prioritize device-level security risks.
  DescriptionForModel: |-
    A collection of KQL-based skills that interact with Microsoft Defender and Sentinel to enhance device-related data analysis. These skills include:
      - Summarizing device exposure levels to identify high-risk and internet-facing devices.
      - Retrieving detailed logon events for specified accounts and devices.
      - Constructing event timelines around specific timestamps to analyze suspicious device activities.
      - Identifying vulnerabilities (CVEs) affecting devices and assessing their impact.
      - Listing devices affected by specific CVEs to prioritize remediation efforts.
    This skillset enables comprehensive device-level security investigations, helping analysts understand vulnerabilities, logon behavior, and event patterns to mitigate risks effectively. Use these skills for detailed insights into device security posture and incident response.
  SupportedAuthTypes:
    - None

  Settings:

    - Name: TenantId
      Label: TenantId
      Description: Azure TenantId.
      HintText: TenantId
      SettingType: String
      Required: true

    - Name: SubscriptionName
      Label: SubscriptionName
      Description: This is the subscription name that security copilot will use for sentinel.
      HintText: yoursubscriptionname
      SettingType: String
      Required: true
      
    - Name: WorkspaceName
      Label: WorkspaceName
      Description: This is the  workspace name that security copilot will use for sentinel.
      HintText: yourworkspace
      SettingType: String
      Required: true

    - Name: ResourceGroupName
      Label: ResourceGroupName
      Description: This is the resource group name that security copilot will use for sentinel.
      HintText: yourresourcegroup
      SettingType: String
      Required: true

SkillGroups:
  - Format: KQL
    Skills:
      - Name: DeviceExposureLevel
        DisplayName: Summarize Device Exposure Levels
        DescriptionForModel: |- 
          Performs a KQL query on the `DeviceInfo` table to evaluate the exposure posture of devices by calculating two key metrics:
          - **Total Number of High-Risk Devices**: The count of devices classified with a "High" exposure level.
          - **High Exposure Internet-Facing Devices**: The count of high-risk devices that are accessible from the internet.
          Designed to provide insights into the security posture of devices, this skill helps prioritize remediation actions by highlighting critical and exposed devices, enabling GPT to suggest further steps to reduce risk.
        Description: Summarize device exposure levels in the environment by identifying the total number of high-risk devices and high-risk internet-facing devices. Helps prioritize remediation efforts for critical assets.
        Settings:
          Target: Defender
          Template: |-
            // Count the number of devices with a High Exposure Level
            let highRiskDevices = 
                DeviceInfo
                | where ExposureLevel == "High"
                | summarize HighRiskDeviceCount = count();
            // Count the number of high exposure level devices that are internet-facing
            let highExposureInternetFacingDevices = 
                DeviceInfo
                | where ExposureLevel == "High" and IsInternetFacing == true
                | summarize HighExposureInternetFacingCount = count();
            // Combine both summaries in a single output
            union highRiskDevices, highExposureInternetFacingDevices

      - Name: DeviceLogonSearch
        DisplayName: Device Logon & Owner
        DescriptionForModel: |- 
          Performs a KQL query on the `DeviceLogonEvents` table to retrieve interactive and remote logon activities for a specified account and date. Key details include:
          - `Timestamp`: Logon event time.
          - `DeviceId`: Unique identifier of the device.
          - `DeviceName`: Name of the device.
          - `AccountName`: Account name used for the logon.
          - `LogonType`: Type of logon (e.g., Interactive, Remote).
          This skill enables security analysts to track and investigate logon events for specific accounts, identify devices associated with the account, and review activity timelines for further analysis.
        Description: Retrieve a detailed log of interactive and remote device logon events for a specified account on a specific date. Includes device ID, device name, logon timestamps, and account name to aid in tracking user activity and identifying associated devices.
        Inputs:
          - Name: AccountName
            Description: The account name, NOT the UPN. Example jsmith
            Required: true
          - Name: event_date
            Description: The date to retrieve logon events for, formatted as YYYY-MM-DD. Example 2024-09-13
            Required: true
        Settings:
          Target: Defender
          Template: |-
            // This query retrieves detailed device logon events for a specified account on a given date.
            // It focuses on interactive and remote logon types, providing details like device IDs and names.
            let userDate = "{{event_date}}"; 
            let start = strcat(userDate, "T00:00:00"); 
            let stop = strcat(userDate, "T23:59:59"); 
            let startDatetime = todatetime(start); 
            let stopDatetime = todatetime(stop); 
            DeviceLogonEvents
            | where AccountName == "{{AccountName}}" 
                  and Timestamp >= startDatetime  
                  and Timestamp < stopDatetime 
                  and LogonType in ("Interactive", "Remote")  // Includes only interactive logons (2: Interactive, 10: RemoteInteractive)
            | project Timestamp, DeviceId, DeviceName, AccountName, LogonType
            | order by Timestamp desc

      - Name: DeviceTimeline
        DisplayName: Device Timeline
        DescriptionForModel: |- 
          Performs a KQL query to construct a timeline of device events and security alerts for a specified device, centered around a user-provided timestamp. Captures events within a defined time window (e.g., 15 seconds before and after) to identify suspicious behavior, anomalies, and patterns. 
          Key features include:
          - Events: File actions, network connections, process activity, and logon events.
          - Alerts: Related security alerts and evidence for additional context.
          - Time categorization: Events are classified as occurring "Before," "Pivot," or "After" the specified timestamp.
          This skill enables security analysts to investigate device behavior comprehensively, focusing on potential malicious actions or correlated events, and provides actionable insights for remediation or further inquiry.
        Description: Retrieve and analyze a detailed timeline of device events and security alerts surrounding a specific timestamp for a given device. Includes file actions, network connections, process activity, and related alerts to investigate suspicious behavior and anomalies.
        Inputs:
          - Name: device_name
            Description: The name of the device for which the timeline is being constructed. Example vnevado-win10v
            Required: true
          - Name: event_timestamp
            Description: The timestamp to build the timeline around, formatted in ISO 8601. Example 2024-08-30T01:10:39.501000
            Required: true
          - Name: time_window
            Description: The time window to search. Example 30s for 30 seconds.
            Default: 15s
            Required: false
        Settings:
          Target: Sentinel
          TenantId: "{{TenantId}}"
          SubscriptionName: "{{SubscriptionName}}"
          ResourceGroupName: "{{ResourceGroupName}}"
          WorkspaceName: "{{WorkspaceName}}"
          Template: |-
            // This query retrieves and analyzes a timeline of device events and security alerts for a specific device, 
            // centered around a user-provided timestamp.
            // The query focuses on a user specified time window (X seconds before and after the provided timestamp) 
            // to understand events before, during, and after a key moment.
            // Results include key information like file actions, network connections, and process activity.
            // The GPT model should analyze the data to identify suspicious patterns or anomalies, 
            // focusing on potential malicious behaviors or correlating events.

            let deviceName = "{{device_name}}"; // The name of the device to filter the timeline
            let timelineWindow = {{time_window}}; // Default of 15 seconds before and after the provided timestamp
            let pivotTimestampInput = datetime('{{event_timestamp}}'); // Timestamp provided by the user
            let pivotTimestamp = pivotTimestampInput;
            // Define the start and end times of the time window to capture relevant events
            let startTime = pivotTimestamp - timelineWindow; 
            let endTime = pivotTimestamp + timelineWindow; 
            // Fetch and combine relevant device events: file events, network events, logon events, and process events.
            // The union of these event types is filtered by the device name and the defined time window.
            // Exclude network signature inspection events as they are less relevant for the analysis.
            let deviceEvents = DeviceEvents
            | union DeviceFileEvents, DeviceNetworkEvents, DeviceLogonEvents, DeviceProcessEvents
            | where DeviceName contains deviceName  // Filter events by the specified device name
            | where Timestamp between (startTime .. endTime) // Capture only events within the time window
            | where ActionType != "NetworkSignatureInspected" // Exclude irrelevant network signature inspection events
            // Classify events as "Before", "Pivot", or "After" based on their relationship to the pivot timestamp
            | extend TimeRelation = case(
                Timestamp < pivotTimestamp, "Before", 
                Timestamp == pivotTimestamp, "Pivot", 
                Timestamp > pivotTimestamp, "After",
                "Unknown") // Default case for any unexpected values
            // Project relevant event details for analysis, including timestamp, action type, filenames, and network information
            | project Timestamp, ActionType, FileName, FolderPath, ProcessCommandLine, RemoteIP, RemotePort, AccountName, 
              InitiatingProcessFileName, InitiatingProcessCommandLine, AlertId = "", Title = "", Category = "", AttackTechniques = "", TimeRelation;
            // Fetch alert evidence for the specified device within the same time window.
            // Alert evidence provides additional context about alerts triggered around the device.
            deviceEvents
            | distinct Timestamp, ActionType, FileName, FolderPath, ProcessCommandLine, RemoteIP, RemotePort, AccountName, 
                InitiatingProcessFileName, InitiatingProcessCommandLine
            | order by Timestamp asc

      - Name: DeviceCVESearch
        DisplayName: Device CVE Search
        DescriptionForModel: |-
          Identify specific CVEs affecting a specified device based on the selected severity level. For each vulnerability, it:
            1. **Analyzes Software Vendors**: Evaluates the type of software the vendor produces and the potential risks associated with the vulnerability, considering the software's role in the system and possible exploitation impacts.
            2. **Summarizes Device Security State**: Assesses the device's security posture by reviewing the number and severity of CVEs and identifying critical areas requiring immediate attention.
          This skill provides actionable security insights, enabling security analysts to prioritize remediation and address vulnerabilities effectively.
        Description: Retrieve a list of software vulnerabilities (CVEs) affecting a specified device, filtered by severity level (Critical, High, Medium, or Low). Provides insights into software vendors, vulnerability impacts, and the device's overall security posture to help prioritize remediation efforts.
        Inputs:
          - Name: device_name
            Description: Device to search on
            Required: true
          - Name: severity_level
            Description: Critical, High, Medium, or Low
            Required: true
        Settings:
          Target: Defender
          Template: |-
            // Retrieve vulnerabilities affecting the specified device and severity level
            DeviceTvmSoftwareVulnerabilities
            | where DeviceName == "{{device_name}}"
            | where VulnerabilitySeverityLevel contains "{{severity_level}}"
            | project DeviceName, SoftwareVendor, SoftwareName, CveId
            | lookup DeviceTvmSoftwareVulnerabilitiesKB on CveId
            | project 
                DeviceName,
                SoftwareVendor, 
                SoftwareName,
                CveId,
                CvssScore,
                EpssScore,
                CvssVector,
                IsExploitAvailable
            | order by EpssScore desc, CvssScore desc


      - Name: CVEHostSearch
        DisplayName: CVE Host Search
        DescriptionForModel: |-
          Performs a KQL query to identify devices impacted by a specific CVE identifier. For each affected device, it:
            1. **Analyzes Impact**: Examines how the vulnerability affects the device, considering the type of software involved, its role in the system, and potential impacts if the vulnerability is exploited.
            2. **Summarizes Security Posture**: Evaluates the overall security risk by analyzing the number of affected devices, their importance within the network, and the severity of the vulnerability.
          This skill provides actionable insights to prioritize remediation, mitigate security risks, and strengthen the overall security posture of the environment.
        Description: Retrieve a list of devices affected by a specified CVE identifier. Provides insights into the impact of the vulnerability on each device, highlights critical risks, and assesses the overall security posture to support remediation efforts across the network.
        Inputs:
          - Name: cve_id
            Description: CVE identifier to search for (e.g., CVE-2023-12345)
            Required: true
        Settings:
          Target: Defender
          Template: |-
            // Retrieve devices affected by the specified CVE
            DeviceTvmSoftwareVulnerabilities
            | where CveId == "{{cve_id}}"
            | project DeviceName, SoftwareVendor, SoftwareName, SoftwareVersion, VulnerabilitySeverityLevel, RecommendedSecurityUpdate
            // For each device:
            // 1. Analyze the impact of the vulnerability on the device, considering the type of software and why the vulnerability could be problematic.
            // 2. Summarize the device's security posture based on the number of devices impacted and their importance.
            // Use this information to provide security insights and prioritize remediation efforts.

      - Name: DeviceDefenderSensorHealthReport
        DisplayName: Microsoft Defender Sensor Health Report
        DescriptionForModel: |-
          Executes a KQL query against DeviceTvmSecureConfigurationAssessment to evaluate Microsoft Defender sensor health status and configurations across Windows, macOS, and Linux devices. This skill:
            1. **Evaluates Defender Components**: Assesses critical security features including real-time protection, tamper protection, cloud protection, PUA protection, and behavior monitoring.
            2. **Tracks Protection Status**: Monitors Defender operational states (Active/Passive/EDR Blocked) and compliance status (GOOD/BAD).
            3. **Monitors Version Currency**: Tracks antivirus signature versions, product versions, and engine versions to ensure up-to-date protection.
          This skill enables security teams to identify misconfigurations, outdated signatures, and disabled protections that could impact endpoint security.
        Description: |-
          Analyzes Microsoft Defender health and configuration status using DeviceTvmSecureConfigurationAssessment data. Evaluates multiple security components:
          
          - Protection Features: Real-time protection, cloud protection, email scanning, PUA protection, and behavior monitoring
          - Operational Status: 
            • GOOD: Configuration meets security requirements
            • BAD: Configuration fails compliance checks, requires attention
            • Active: Defender is primary antivirus with full protection
            • Passive: Defender is in passive mode (another antivirus is primary)
            • EDR Blocked: Defender is blocked by endpoint detection and response policy
            • Unknown: Status cannot be determined
          
          Tracks version information for signatures, product, and engine to ensure current protection levels. Results help prioritize security gaps and maintain strong endpoint protection across Windows, macOS, and Linux systems.
        Inputs:
          - Name: device_name
            Description: Name of the device to evaluate (e.g., "Device01")
            Required: true
        Settings:
          Target: Defender
          Template: |-
            DeviceTvmSecureConfigurationAssessment
            | where isnotempty('{{device_name}}') and DeviceName =~ '{{device_name}}'    // Only filter if device_name is provided
                or isempty('{{device_name}}')                                            // Otherwise return all devices
            | where ConfigurationId in ('scid-90', 'scid-91', 'scid-2003', 'scid-2010', 'scid-2011', 'scid-2012', 'scid-2013', 'scid-2016', 'scid-5095', 'scid-6095', 
                                      'scid-5090', 'scid-6090', 'scid-5091', 'scid-6091', 'scid-5094', 'scid-6094')
            | extend Test = case(
                ConfigurationId == 'scid-2003' and OSPlatform startswith 'Windows', 'TamperProtection',
                ConfigurationId == 'scid-2010' and OSPlatform startswith 'Windows', 'DefenderMode',
                ConfigurationId == 'scid-90'   and OSPlatform startswith 'Windows', 'EmailScanning', 
                ConfigurationId == 'scid-2011' and OSPlatform startswith 'Windows', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-5095' and OSPlatform == 'macOS', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-6095' and OSPlatform == 'Linux', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-2012' and OSPlatform startswith 'Windows','RealtimeProtection',
                ConfigurationId == 'scid-5090' and OSPlatform == 'macOS', 'RealtimeProtection',
                ConfigurationId == 'scid-6090' and OSPlatform == 'Linux', 'RealtimeProtection',
                ConfigurationId == 'scid-2013' and OSPlatform startswith 'Windows', 'PUAProtection',
                ConfigurationId == 'scid-5091' and OSPlatform == 'macOS', 'PUAProtection',
                ConfigurationId == 'scid-6091' and OSPlatform == 'Linux', 'PUAProtection',
                ConfigurationId == 'scid-2016' and OSPlatform startswith 'Windows', 'CloudProtection',
                ConfigurationId == 'scid-5094' and OSPlatform == 'macOS', 'CloudProtection',
                ConfigurationId == 'scid-6094' and OSPlatform == 'Linux', 'CloudProtection',
                ConfigurationId == 'scid-91' and OSPlatform startswith 'Windows', 'BehaviourMonitoring',
                'NA')
            | extend Result = case(
                ConfigurationId == 'scid-2010', case(
                    parse_json(Context)[0][0] == '0', 'Active',
                    parse_json(Context)[0][0] == '1', 'Passive',
                    parse_json(Context)[0][0] == '4', 'EDR Blocked',
                    'Unknown'
                ),
                IsCompliant == 1, 'GOOD',
                'BAD'
            )
            | extend SignVer = case(
                ConfigurationId == 'scid-2011' and OSPlatform startswith 'Windows', parse_json(Context)[0], 
                ConfigurationId == 'scid-5095' and OSPlatform == 'macOS', parse_json(Context)[0], 
                ConfigurationId == 'scid-6095' and OSPlatform == 'Linux', parse_json(Context)[0], 
                '')
            | extend DeviceName = toupper(tostring(split(DeviceName, '.')[0]))
            | extend packed = pack(Test, Result)
            | summarize Tests = make_bag(packed),
                SignatureData = max(SignVer), 
                DeviceName = any(DeviceName), 
                OSPlatform = any(OSPlatform) 
                by DeviceId
            // Create a default record if no data exists
            | union (print 
                DeviceId = "",
                Tests = pack(
                    "TamperProtection", "N/A",
                    "DefenderMode", "N/A",
                    "EmailScanning", "N/A",
                    "AntivirusSignatureVersion", "N/A",
                    "RealtimeProtection", "N/A",
                    "PUAProtection", "N/A",
                    "CloudProtection", "N/A",
                    "BehaviourMonitoring", "N/A"
                ),
                SignatureData = "",
                DeviceName = "",
                OSPlatform = ""
            )
            | evaluate bag_unpack(Tests)
            | extend AVSignatureVersion = tostring(parse_json(SignatureData)[0]),
                Date = todatetime(parse_json(SignatureData)[2]), 
                ProductVersion = tostring(parse_json(SignatureData)[3]), 
                EngineVersion = tostring(parse_json(SignatureData)[1])
            | join kind=leftouter (DeviceInfo
                | distinct DeviceId, MachineGroup, OnboardingStatus) 
                on DeviceId
            | where OnboardingStatus == "Onboarded" or isempty(DeviceId)
            | project DeviceName, OSPlatform, MachineGroup, 
                TamperProtection, DefenderMode, EmailScanning, 
                AntivirusSignatureVersion, RealtimeProtection, 
                PUAProtection, CloudProtection, BehaviourMonitoring,
                AVSignatureVersion, Date, ProductVersion, EngineVersion

      - Name: DefenderAvSignatureHealthReport
        DisplayName: Microsoft Defender AV Signature Health Report
        DescriptionForModel: |-
          Executes a KQL query against DeviceTvmSecureConfigurationAssessment to evaluate Microsoft Defender antivirus signature status and real-time protection health across Windows, macOS, and Linux devices. This skill:
            1. **Tracks Signature Currency**: Compares current device signatures against latest available signatures per platform
            2. **Monitors Protection Status**: Identifies devices with inactive real-time protection
            3. **Cross-Platform Coverage**: Evaluates protection across Windows, macOS, and Linux endpoints
          This skill enables security teams to quickly identify devices with outdated signatures or disabled real-time protection that require immediate attention.
        Description: |-
          Analyzes Microsoft Defender antivirus signature status and real-time protection health using DeviceTvmSecureConfigurationAssessment data. Evaluates critical security components:
          
          - Signature Status:
            • Current device signature version
            • Latest available signature version for the platform
            • Last update timestamp
          - Protection Status:
            • GOOD: Real-time protection is active and functioning
            • BAD: Real-time protection is inactive or malfunctioning
          
          Results are filtered to show only devices requiring attention (outdated signatures or inactive protection), helping teams prioritize updates and fixes across Windows, macOS, and Linux systems.
        Settings:
          Target: Defender
          Template: |-
            // Find the latest signature version for each OS platform
            let LatestSignatures = 
                DeviceTvmSecureConfigurationAssessment
                | where ConfigurationId in ('scid-2011', 'scid-5095', 'scid-6095')  // AV signature configs for Windows, macOS, Linux
                | where IsCompliant == 1  // Only look at devices with good signatures
                | extend OSPlatform = case(
                    OSPlatform startswith 'Windows', 'Windows',
                    OSPlatform == 'macOS', 'macOS',
                    OSPlatform == 'Linux', 'Linux',
                    'Other'
                )
                | extend SignVer = parse_json(Context)[0]
                | extend SignatureVersion = tostring(SignVer)
                | summarize arg_max(todatetime(parse_json(Context)[2]), SignatureVersion) by OSPlatform;
            // Main query for devices with AV issues
            DeviceTvmSecureConfigurationAssessment
            | where ConfigurationId in ('scid-90', 'scid-91', 'scid-2003', 'scid-2010', 'scid-2011', 'scid-2012', 'scid-2013', 'scid-2016', 'scid-5095', 'scid-6095', 
                                      'scid-5090', 'scid-6090', 'scid-5091', 'scid-6091', 'scid-5094', 'scid-6094')
            | extend Test = case(
                ConfigurationId == 'scid-2011' and OSPlatform startswith 'Windows', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-5095' and OSPlatform == 'macOS', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-6095' and OSPlatform == 'Linux', 'AntivirusSignatureVersion',
                ConfigurationId == 'scid-2012' and OSPlatform startswith 'Windows','RealtimeProtection',
                ConfigurationId == 'scid-5090' and OSPlatform == 'macOS', 'RealtimeProtection',
                ConfigurationId == 'scid-6090' and OSPlatform == 'Linux', 'RealtimeProtection',
                'NA')
            | where Test in ('AntivirusSignatureVersion', 'RealtimeProtection')
            | extend Result = case(
                IsCompliant == 1, 'GOOD',
                'BAD'
            )
            | extend SignVer = case(
                ConfigurationId in ('scid-2011', 'scid-5095', 'scid-6095'), parse_json(Context)[0],
                '')
            | extend DeviceName = toupper(tostring(split(DeviceName, '.')[0]))
            | extend OSType = case(
                OSPlatform startswith 'Windows', 'Windows',
                OSPlatform == 'macOS', 'macOS',
                OSPlatform == 'Linux', 'Linux',
                'Other'
            )
            | extend packed = pack(Test, Result)
            | summarize Tests = make_bag(packed),
                SignatureData = max(SignVer), 
                DeviceName = any(DeviceName), 
                OSPlatform = any(OSPlatform),
                OSType = any(OSType)
                by DeviceId
            | evaluate bag_unpack(Tests)
            | extend AVSignatureVersion = tostring(parse_json(SignatureData)[0]),
                Date = todatetime(parse_json(SignatureData)[2])
            | join kind=leftouter (DeviceInfo
                | distinct DeviceId, MachineGroup, OnboardingStatus) 
                on DeviceId
            | join kind=leftouter LatestSignatures on $left.OSType == $right.OSPlatform
            | where OnboardingStatus == "Onboarded"
            // Filter to show only devices with AV issues
            | where AntivirusSignatureVersion == "BAD" or RealtimeProtection == "BAD"
            | project 
                DeviceName,
                OSPlatform,
                MachineGroup,
                ['AV Status'] = RealtimeProtection,
                ['Current Signature'] = AVSignatureVersion,
                ['Latest Available Signature'] = SignatureVersion,
                ['Last Update'] = Date
            | sort by DeviceName asc
            | take 15

      - Name: WindowsCriticalVulnerabilitiesReport
        DisplayName: Windows Critical Vulnerabilities Health Report
        DescriptionForModel: |-
          Executes a KQL query against DeviceTvmSoftwareVulnerabilities and DeviceTvmSoftwareVulnerabilitiesKB to evaluate critical vulnerabilities across Windows 10 and 11 devices. This skill:
            1. **Identifies High-Risk Devices**: Finds top 10 devices with most critical vulnerabilities
            2. **Tracks Exploit Status**: Monitors exploitable vulnerabilities and CVSS scores
            3. **Evaluates Zero-Day Impact**: Identifies devices affected by zero-day vulnerabilities
          This skill enables security teams to quickly identify and prioritize the most vulnerable Windows devices requiring immediate attention.
        Description: |-
          Analyzes critical vulnerabilities on Windows 10 and 11 devices using DeviceTvmSoftwareVulnerabilities and DeviceTvmSoftwareVulnerabilitiesKB data. Evaluates critical security metrics:
          
          - Vulnerability Status:
            • Total critical vulnerabilities per device
            • Zero-day vulnerability count
            • Number of exploitable vulnerabilities
          - Risk Assessment:
            • Maximum CVSS score
            • Maximum EPSS score
            • CVSS vector patterns
          - System Details:
            • OS Platform and Version
            • Architecture
            • CVE count
          
          Results are ordered by critical vulnerability count and CVSS scores, helping teams prioritize remediation efforts across Windows devices.
        Settings:
          Target: Defender
          Template: |-
            let TopDevices = 
                DeviceTvmSoftwareVulnerabilities
                | where OSPlatform in ("Windows10", "Windows11")
                | where VulnerabilitySeverityLevel == "Critical"
                | summarize VulnCount=count() by DeviceId, DeviceName
                | top 10 by VulnCount desc;
            let DeviceVulns = DeviceTvmSoftwareVulnerabilities
                | where OSPlatform in ("Windows10", "Windows11")
                | where VulnerabilitySeverityLevel == "Critical"
                | where DeviceId in (TopDevices);
            DeviceVulns
            | summarize 
                ['Critical Vulnerabilities'] = count(),
                ['Zero Days'] = countif(CveTags has "ZeroDay")
                by DeviceId, DeviceName, OSPlatform, OSVersion, OSArchitecture, CveId
            | lookup DeviceTvmSoftwareVulnerabilitiesKB on CveId
            | summarize 
                ['Critical Vulnerabilities'] = max(['Critical Vulnerabilities']),
                ['Zero Days'] = max(['Zero Days']),
                ['Max CVSS Score'] = max(CvssScore),
                ['Exploitable CVEs'] = countif(IsExploitAvailable == true),
                ['Max EPSS Score'] = max(EpssScore),
                ['CVSS Vectors'] = make_set(CvssVector),
                ['CVE Count'] = dcount(CveId)
                by DeviceId, DeviceName, OSPlatform, OSVersion, OSArchitecture
            | project 
                DeviceName,
                OSPlatform,
                OSVersion,
                OSArchitecture,
                ['Critical Vulnerabilities'],
                ['Zero Days'],
                ['Exploitable CVEs'],
                ['Max CVSS Score'],
                ['Max EPSS Score'],
                ['CVE Count'],
                ['CVSS Vectors']
            | order by ['Critical Vulnerabilities'] desc, ['Max CVSS Score'] desc