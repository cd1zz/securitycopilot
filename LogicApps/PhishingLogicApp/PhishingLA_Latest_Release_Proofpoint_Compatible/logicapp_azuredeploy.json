{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "SubscriptionId": {
            "type": "String",
            "metadata": {
                "description": "The subscription ID where resources will be deployed."
            }
        },
        "LogicAppName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Logic App to be deployed."
            }
        },
        "FunctionAppName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Azure Function App created during previous Function App deployment."
            }
        },
        "FunctionAppResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "The name of the resource group where the Function App is deployed."
            }
        },
        "LogAnalyticsWorkspaceName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Log Analytics Workspace for where Sentinel lives."
            }
        },
        "LogAnalyticsWorkspId": {
            "type": "String",
            "metadata": {
                "description": "The workspace ID of the Log Analytics Sentinel Workspace."
            }
        },
        "LogAnalyticsResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "The resource group name of the Log Analytics Sentinel Workspace."
            }
        },
        "SharedMailboxAddress": {
            "type": "String",
            "metadata": {
                "description": "Email address of the shared O365 mailbox."
            }
        },
        "HTMLReportRecipient": {
            "type": "String",
            "metadata": {
                "description": "Where to send the HTML report."
            }
        }


    },
    "variables": {
        "Office365-ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "ConversionService-ConnectionName": "[concat('ConversionService-1-', parameters('LogicAppName'))]",
        "AzureSentinel-ConnectionName": "[concat('azuresentinel-', parameters('LogicAppName'))]",
        "AzureMonitorLogs-ConnectionName": "[concat('azuremonitorlogs-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email_functionapp",
        "FunctionName02": "clean_json_functionapp",
        "FunctionName03": "generate_html_report_functionapp",
        "FunctionName04": "extract_regex_functionapp"

    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureMonitorLogs-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureMonitorLogs-ConnectionName')]",
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                },
                "api": {
                    "category": "Standard",
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "customParameterValues": {}

            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinel-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinel-ConnectionName')]",
                "parameterValueType": "Alternative",
                "customParameterValues": {},
                "api": {

                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },

        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ConversionService-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('ConversionService-ConnectionName')]",
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/conversionservice')]"
                }
            }
        },
        {

            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-ConnectionName')]",
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-ConnectionName')]",
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        },

        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('LogicAppName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('ConversionService-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogs-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinel-ConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_in_a_shared_mailbox_(V2)": {
                            "recurrence": {
                                "interval": 3,
                                "frequency": "Minute"
                            },
                            "evaluatedRecurrence": {
                                "interval": 3,
                                "frequency": "Minute"
                            },
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/SharedMailbox/Mail/OnNewEmail",
                                "queries": {
                                    "mailboxAddress": "[parameters('SharedMailboxAddress')]",
                                    "importance": "Any",
                                    "hasAttachments": false,
                                    "includeAttachments": true,
                                    "folderId": "Inbox"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Initialize_is_defender_incident": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "is_defender_incident",
                                        "type": "boolean"
                                    }
                                ]
                            }
                        },
                        "Initialize_network_message_id": {
                            "runAfter": {
                                "Initialize_is_defender_incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "network_message_id",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "If_email_subject_contains_phishing": {
                            "actions": {
                                "Show_network_message_id_here": {
                                    "runAfter": {
                                        "Parse_JSON_NetworkMessageId": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@body('Parse_JSON_NetworkMessageId')?['matched_value']"
                                },
                                "Set_variable_defender_incident_true": {
                                    "runAfter": {
                                        "Set_variable_network_message_id": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "is_defender_incident",
                                        "value": true
                                    }
                                },
                                "Set_variable_network_message_id": {
                                    "runAfter": {
                                        "Show_network_message_id_here": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "network_message_id",
                                        "value": "@outputs('Show_network_message_id_here')"
                                    }
                                },
                                "Parse_JSON_NetworkMessageId": {
                                    "runAfter": {
                                        "Find_NetworkMessageId": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Find_NetworkMessageId')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "input": {
                                                    "type": "object",
                                                    "properties": {
                                                        "pattern": {
                                                            "type": "string"
                                                        },
                                                        "subject": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "match_found": {
                                                    "type": "boolean"
                                                },
                                                "matched_value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "Find_NetworkMessageId": {
                                    "type": "Function",
                                    "inputs": {
                                        "body": {
                                            "pattern": "(?<=Phishing:)([a-f0-9-]{36})",
                                            "subject": "@triggerBody()?['subject']"
                                        },
                                        "function": {
                                            "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName04'))]"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_network_message_id": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Set_variable_is_defender_incident_false": {
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "is_defender_incident",
                                            "value": false
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "contains": [
                                            "@triggerBody()?['subject']",
                                            "Phishing:"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {
                                "If_email_subject_contains_phishing": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value",
                                "queries": {
                                    "mailboxAddress": "[parameters('SharedMailboxAddress')]"
                                }
                            }
                        },
                        "Initialize_raw_email": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        },
                        "For_each_raw_email_attached_to_carrier_email": {
                            "foreach": "@triggerBody()?['attachments']",
                            "actions": {
                                "Check_if_msg_in_binary_format": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "type": "Compose",
                                            "inputs": "@base64ToString(item()?['contentBytes'])"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@string(outputs('Decode_Base64_ContentBytes'))"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Show_current_email_here": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Show_current_email_here": {
                                    "type": "Compose",
                                    "inputs": "@item()"
                                }
                            },
                            "runAfter": {
                                "Initialize_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Process_parseEmail_JSON": {
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email_content": {
                                            "type": "object",
                                            "properties": {
                                                "message_id": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "container_path": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "reconstruction_method": {
                                                    "type": "string"
                                                },
                                                "urls": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "original_url": {
                                                                "type": "string"
                                                            },
                                                            "is_shortened": {
                                                                "type": "boolean"
                                                            },
                                                            "expanded_url": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "ip_addresses": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "domains": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Initialize_email_body": {
                            "runAfter": {
                                "Process_parseEmail_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['body']"
                                    }
                                ]
                            }
                        },
                        "Initialize_attachments": {
                            "runAfter": {
                                "Initialize_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['attachments']"
                                    }
                                ]
                            }
                        },
                        "Initialize_raw_urls": {
                            "runAfter": {
                                "Initialize_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_urls": {
                            "runAfter": {
                                "Initialize_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_domains": {
                            "runAfter": {
                                "Initialize_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['domains']"
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url_truncate_if_over_100_char": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_shortened_url_to_url_array": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@if(and(not(equals(item()['expanded_url'], 'Not Applicable')), greater(length(item()['expanded_url']), 100)), concat(substring(item()['expanded_url'], 0, 100), '...'), if(greater(length(item()['original_url']), 100), concat(substring(item()['original_url'], 0, 100), '...'), item()['original_url']))"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_original_url_to_url_array": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@if(equals(item()['expanded_url'], 'Not Applicable'), item()['original_url'], item()['expanded_url'])"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "greater": [
                                                    "@length(item()['original_url'])",
                                                    100
                                                ]
                                            },
                                            {
                                                "greater": [
                                                    "@length(item()['expanded_url'])",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Show_URL_array_here": {
                            "runAfter": {
                                "For_each_raw_url_truncate_if_over_100_char": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('urls')"
                        },
                        "Security_Copilot_Email_Analysis": {
                            "runAfter": {
                                "Show_URL_array_here": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "/AskGpt\n\n## SYSTEM  \nYou are a cybersecurity LLM designed to triage emails for **phishing**, **BEC**, and **social engineering** threats. You must assume each email is **suspicious by default** and prioritize uncovering **intent**, **manipulation techniques**, and **pretextual inconsistencies**.\n\nOnly output a **valid JSON object**. Do not include markdown, preambles, or commentary. All fields must be populated using reasoning and scoring logic below. Failure to comply will break downstream automation.\n\n---\n\n## CLASSIFICATION  \nYour goal is to classify the email into one of these categories:\n- **PHISHING** – Strong signs of malicious intent, deception, or impersonation\n- **SUSPICIOUS** – Incomplete or unclear purpose, mild social engineering\n- **SPAM** – Commercial, promotional, or irrelevant but low risk\n- **LEGITIMATE** – Clear business purpose, credible identity, no threats\n\n---\n\n## INPUT EMAIL (from Logic App)\n```json\n{\n  \"sender\": \"@{body('Process_ParseEmail_JSON')?['email_content']?['sender']}\",\n  \"reply_to\": \"@{body('Process_parseEmail_JSON')?['body']?['email_content']?['reply_to']}\",\n  \"recipient\": \"@{body('Process_ParseEmail_JSON')?['email_content']?['receiver']}\",\n  \"subject\": \"@{body('Process_ParseEmail_JSON')?['email_content']?['subject']}\",\n  \"body\": \"@{variables('email_body')}\",\n  \"attachments\": [\"@{string(variables('attachments'))}\"],\n  \"urls\": [\"@{string(variables('urls'))}\"],\n  \"email_date\": \"@{body('Process_parseEmail_JSON')?['email_content']?['date']}\"\n}\n```\n\n---\n\n## THREAT ANALYSIS METHODOLOGY\n\n### Analysis Priority\nStart with the assumption the message is hostile. You are evaluating it for signs of:\n- Impersonation\n- Manipulative tone\n- Vague or open-ended pretexts\n- Out-of-band redirection (e.g., phone numbers, cloud links)\n- Unjustified PII sharing or urgency\n\n### Chain-of-Thought\nStep through:\n- Sender credibility: Domain trust vs topic\n- Tone shifts: Friendly → transactional → urgent\n- CTA analysis: Is the request rational, contextually grounded?\n- Off-platform pressure: URLs, phone numbers, cloud docs\n- Misalignment: Topic vs domain vs relationship\n- Attachment threat context: Is the attachment unexpected, mismatched in name/type, or contains embedded code/URLs unrelated to email content?\n- Sparse attachment with hidden complexity (e.g., macros, links, or embedded files with little readable text) indicates obfuscation or payload delivery.\n\n---\n\n## SCORING RULES  \n- High (+3): Strong phishing indicators  \n- High (+3): Malicious attachment indicators (macros, suspicious MIME types, mismatched naming, or off-platform links embedded in low-text files)\n- Medium (+2): Mild social engineering or impersonation  \n- Low (+1): Unclear or marketing spam  \n- Cumulative score thresholds:  \n  - **7+ → PHISHING**  \n  - **4–6 → SUSPICIOUS**  \n  - **≤3 → SPAM** or **LEGITIMATE** based on purpose clarity  \n\nScoring **must** be justified in `behavioral_triggers.justification`.\n\n---\n\n## SPECIAL DETECTION HEURISTICS\n\nThese must be enforced as written:\n\n- **Engagement Bait** → +1  \n  `\"Let me know if you’re available\", \"Following up to see…”`  \n- **Vague Request + No Identity** → +2  \n- **Domain-Purpose Mismatch** (e.g. tax help from gmail.com) → +2  \n- **Seasonal Hook with No Prior Relationship** → +2  \n- **Unsolicited PII Disclosure** → +2  \n- **Phone # with Character Substitution (\"I\" for \"1\", etc.)** → +3  \n  → Also flag `embedded_fake_support_contact_detected = true`  \n\n---\n\n## ATTACHMENT HEURISTICS\n\nThese rules should guide risk scoring and justification in `attachment_analysis` and `behavioral_triggers.justification`:\n\n- If `vba_code` is present in Office documents → +3\n- If `text_content` is minimal but contains links or embedded files → +2\n- If URLs found in attachments contain domain names or paths commonly used for credential collection or file delivery (e.g., sharepoint, googledrive, 1drv, onedrive, dropbox, login, auth, verify, download, or url shortening services), and the surrounding content implies urgency, account access, or verification, then → +2\n- If formulas or comments contain tracking, links, or external references → +1\n- If attachments are included but irrelevant to the email’s topic → +1\n\n---\n\n## JSON OUTPUT SCHEMA\n\nIf unable to process, return:\n```json\n{\"error\": \"Invalid email content for analysis\"}\n```\n\nOutput must be in this format:\n```json\n{\n  \"email_summary\": {\n    \"subject\": \"\",\n    \"content_summary\": \"\"  // Summarize email’s purpose and manipulative indicators; do NOT quote verbatim\n  },\n  \"behavioral_triggers\": {\n    \"tone\": \"\",\n    \"justification\": \"\",  // Justify why any risk score was added\n    \"alignment_with_purpose\": \"\",\n    \"lack_of_context\": \"\",\n    \"engagement_bait\": \"\",\n    \"phone_based_social_engineering\": \"\",\n    \"seasonal_bait_detected\": {\n      \"detected\": \"\",\n      \"seasonal_context\": \"\"\n    },\n    \"short_vague_request\": {\n      \"detected\": \"\",\n      \"engagement_request\": \"\"\n    }\n  },\n  \"logical_coherence\": {\n    \"is_consistent\": \"\",\n    \"contradictions_or_vagueness\": \"\",\n    \"logical_actions\": \"\",\n    \"subtle_inconsistencies\": [],\n    \"business_context_check\": {\n      \"clear_business_purpose\": \"\",  // Yes if this makes sense in a known workflow\n      \"workflow_alignment\": \"\"\n    }\n  },\n  \"intent_verification\": {\n    \"likely_intent\": \"\",\n    \"risk_assessment\": \"\",\n    \"stated_purpose_mismatch\": \"\",\n    \"financial_role_mismatch\": \"\",\n    \"external_login_requirement\": \"\",\n    \"minimal_text_attachment\": \"\",\n    \"executive_impersonation\": {\n      \"detected\": \"\",\n      \"domain_mismatch\": \"\",\n      \"position_claimed\": \"\",\n      \"actual_domain\": \"\"\n    }\n  },\n  \"attachment_analysis\": {\n    \"is_relevant\": \"\",\n    \"attachment_metadata\": {\n      \"attachment_name\": \"\",\n      \"attachment_sha256\": \"\",\n      \"content_type\": \"\",\n      \"attachment_text\": {\n        \"text_content\": \"\",\n        \"urls\": [],\n        \"hyperlinks\": [],\n        \"vba_code\": {},\n        \"formulas\": [],\n        \"comments\": [],\n        \"embedded_files\": []\n      }\n    },\n    \"risks\": \"\"\n  },\n  \"url_analysis\": {\n    \"url_categorization\": {\n      \"primary_action_urls\": [],\n      \"informational_urls\": [],\n      \"stylistic_framework_urls\": []\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"\",\n      \"domain_alignment\": \"\",\n      \"necessity\": \"\",\n      \"risks\": \"\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"stated_purpose\": \"\",\n    \"true_intent\": \"\",\n    \"gaps\": \"\"\n  },\n  \"bec_reconnaissance_detection\": {\n    \"detected\": \"\",\n    \"reason\": \"\",\n    \"risk_assessment\": \"\"\n  },\n  \"final_assessment\": {\n    \"category\": \"\",  // Must be one of: PHISHING, SUSPICIOUS, SPAM, LEGITIMATE\n    \"rationale\": \"\",  // Describe the decisive factors\n    \"risk_level\": \"\",\n    \"high_risk_flags\": [],\n    \"medium_risk_flags\": [],\n    \"low_risk_flags\": [],\n    \"assessment_summary\": \"\"  // A 1–5 sentence summary of the model’s logic and final conclusion\n  }\n}\n```\n\n---\n\n## STRICT INSTRUCTIONS\n- Output only JSON, never markdown or commentary  \n- Begin analysis with **malicious by default** assumption  \n- Score and flag based on manipulation, intent, and trust violations—not politeness or formatting  \n- `summary_text` must explain the model's logic in under 5 sentences  \n- `content_summary` must summarize behavior, not repeat email verbatim"
                                },
                                "path": "/process-prompt",
                                "retryPolicy": {
                                    "type": "fixed",
                                    "count": 10,
                                    "interval": "PT10M"
                                }
                            }
                        },

                        "Parse_normalized_JSON": {
                            "runAfter": {
                                "Normalize_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Normalize_JSON')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email_summary": {
                                            "type": "object",
                                            "properties": {
                                                "subject": {
                                                    "type": "string"
                                                },
                                                "content_summary": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "behavioral_triggers": {
                                            "type": "object",
                                            "properties": {
                                                "tone": {
                                                    "type": "string"
                                                },
                                                "justification": {
                                                    "type": "string"
                                                },
                                                "alignment_with_purpose": {
                                                    "type": "string"
                                                },
                                                "lack_of_context": {
                                                    "type": "string"
                                                },
                                                "engagement_bait": {
                                                    "type": "string"
                                                },
                                                "phone_based_social_engineering": {
                                                    "type": "string"
                                                },
                                                "short_vague_request": {
                                                    "type": "object",
                                                    "properties": {
                                                        "detected": {
                                                            "type": "string"
                                                        },
                                                        "engagement_request": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "logical_coherence": {
                                            "type": "object",
                                            "properties": {
                                                "is_consistent": {
                                                    "type": "string"
                                                },
                                                "contradictions_or_vagueness": {
                                                    "type": "string"
                                                },
                                                "logical_actions": {
                                                    "type": "string"
                                                },
                                                "subtle_inconsistencies": {
                                                    "type": "array"
                                                },
                                                "business_context_check": {
                                                    "type": "object",
                                                    "properties": {
                                                        "clear_business_purpose": {
                                                            "type": "string"
                                                        },
                                                        "workflow_alignment": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "intent_verification": {
                                            "type": "object",
                                            "properties": {
                                                "likely_intent": {
                                                    "type": "string"
                                                },
                                                "risk_assessment": {
                                                    "type": "string"
                                                },
                                                "stated_purpose_mismatch": {
                                                    "type": "string"
                                                },
                                                "financial_role_mismatch": {
                                                    "type": "string"
                                                },
                                                "external_login_requirement": {
                                                    "type": "string"
                                                },
                                                "minimal_text_attachment": {
                                                    "type": "string"
                                                },
                                                "executive_impersonation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "detected": {
                                                            "type": "string"
                                                        },
                                                        "domain_mismatch": {
                                                            "type": "string"
                                                        },
                                                        "position_claimed": {
                                                            "type": "string"
                                                        },
                                                        "actual_domain": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "attachment_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "is_relevant": {
                                                    "type": "string"
                                                },
                                                "attachment_metadata": {
                                                    "type": "object",
                                                    "properties": {
                                                        "attachment_name": {
                                                            "type": "string"
                                                        },
                                                        "attachment_sha256": {
                                                            "type": "string"
                                                        },
                                                        "content_type": {
                                                            "type": "string"
                                                        },
                                                        "attachment_text": {
                                                            "type": "object",
                                                            "properties": {
                                                                "text_content": {
                                                                    "type": "string"
                                                                },
                                                                "urls": {
                                                                    "type": "array"
                                                                },
                                                                "hyperlinks": {
                                                                    "type": "array"
                                                                },
                                                                "vba_code": {
                                                                    "type": "object",
                                                                    "properties": {}
                                                                },
                                                                "formulas": {
                                                                    "type": "array"
                                                                },
                                                                "comments": {
                                                                    "type": "array"
                                                                },
                                                                "embedded_files": {
                                                                    "type": "array"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "risks": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "url_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "url_categorization": {
                                                    "type": "object",
                                                    "properties": {
                                                        "primary_action_urls": {
                                                            "type": "array"
                                                        },
                                                        "informational_urls": {
                                                            "type": "array"
                                                        },
                                                        "stylistic_framework_urls": {
                                                            "type": "array"
                                                        }
                                                    }
                                                },
                                                "primary_action_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "relevance": {
                                                            "type": "string"
                                                        },
                                                        "domain_alignment": {
                                                            "type": "string"
                                                        },
                                                        "necessity": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "pretense_vs_intent_mapping": {
                                            "type": "object",
                                            "properties": {
                                                "stated_purpose": {
                                                    "type": "string"
                                                },
                                                "true_intent": {
                                                    "type": "string"
                                                },
                                                "gaps": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "bec_reconnaissance_detection": {
                                            "type": "object",
                                            "properties": {
                                                "detected": {
                                                    "type": "string"
                                                },
                                                "reason": {
                                                    "type": "string"
                                                },
                                                "risk_assessment": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "final_assessment": {
                                            "type": "object",
                                            "properties": {
                                                "category": {
                                                    "type": "string"
                                                },
                                                "rationale": {
                                                    "type": "string"
                                                },
                                                "risk_level": {
                                                    "type": "string"
                                                },
                                                "high_risk_flags": {
                                                    "type": "array"
                                                },
                                                "medium_risk_flags": {
                                                    "type": "array"
                                                },
                                                "low_risk_flags": {
                                                    "type": "array"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },


                        "Initialize_systemalert_id_query_results": {
                            "runAfter": {
                                "Generate_HTML_report_from_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "systemalertid_query_results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "If_is_defender_incident_true": {
                            "actions": {
                                "Html_to_text": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['conversionservice-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "<p class=\"editor-paragraph\">@{body('Generate_HTML_report_from_JSON')}</p>",
                                        "path": "/html2text"
                                    }
                                },
                                "Alert_-_Get_incident_from_systemalertid": {
                                    "runAfter": {
                                        "If_empty_results_wait_15_minutes_for_logs_to_show_up": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "[concat('/Incidents/subscriptions/@{encodeURIComponent(''', parameters('SubscriptionId'), ''')}/resourceGroups/@{encodeURIComponent(''', parameters('LogAnalyticsResourceGroup'),''')}/workspaces/@{encodeURIComponent(''', parameters('LogAnalyticsWorkspId')  ,''')}/alerts/@{encodeURIComponent(variables(''systemalertid_query_results'')[0][''SystemAlertId''])}')]"
                                    }
                                },
                                "Add_comment_to_incident_(V3)_armid": {
                                    "runAfter": {
                                        "Alert_-_Get_incident_from_systemalertid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "incidentArmId": "@body('Alert_-_Get_incident_from_systemalertid')?['id']",
                                            "message": "<p class=\"editor-paragraph\">********** Phishing Analysis Generated by Security Copilot **********</p><p class=\"editor-paragraph\">@{body('Html_to_text')}</p><br><p class=\"editor-paragraph\">---<br>Report generated: @{utcNow()}<br><i><em class=\"editor-text-italic\">Generated with AI, check for accuracy.</em></i></p><br>"
                                        },
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Send_an_email_from_a_shared_mailbox_(V2)_with_incident_url": {
                                    "runAfter": {
                                        "Add_comment_to_incident_(V3)_armid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "MailboxAddress": "[parameters('SharedMailboxAddress')]",
                                            "To": "[parameters('HTMLReportRecipient')]",
                                            "Subject": "Phishing Email Analysis",
                                            "Body": "<p class=\"editor-paragraph\"><br>@{body('Generate_HTML_report_from_JSON')}</p><br><p class=\"editor-paragraph\">***********</p><p class=\"editor-paragraph\"><b><strong class=\"editor-text-bold\">Incident URL:</strong></b></p><p class=\"editor-paragraph\"><a href=\"@{body('Alert_-_Get_incident_from_systemalertid')?['properties']?['incidentUrl']}\" class=\"editor-link\">@{body('Alert_-_Get_incident_from_systemalertid')?['properties']?['incidentUrl']}</a></p><br><p class=\"editor-paragraph\"><i><b><strong class=\"editor-text-bold editor-text-italic\">Generated with AI, check for accuracy.</strong></b></i></p><p class=\"editor-paragraph\">***********</p>",
                                            "Importance": "Normal"
                                        },
                                        "path": "/v2/SharedMailbox/Mail"
                                    }
                                },
                                "If_empty_results_wait_15_minutes_for_logs_to_show_up": {
                                    "actions": {
                                        "Delay_15_min": {
                                            "type": "Wait",
                                            "inputs": {
                                                "interval": {
                                                    "count": 15,
                                                    "unit": "Minute"
                                                }
                                            }
                                        },
                                        "Second_try_set_variable_systemalertid_query_results": {
                                            "runAfter": {
                                                "Query_to_get_systemalertid_second_try": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "systemalertid_query_results",
                                                "value": "@body('Query_to_get_systemalertid_second_try')?['value']"
                                            }
                                        },
                                        "Query_to_get_systemalertid_second_try": {
                                            "runAfter": {
                                                "Delay_15_min": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": "SecurityAlert\n| where isnotempty(Entities)\n| extend MailEntities = parse_json(Entities)\n| mv-expand MailEntities\n| where MailEntities.Type == \"mailMessage\"\n| extend NetworkMessageId = tostring(MailEntities.NetworkMessageId)\n| where NetworkMessageId == \"@{variables('network_message_id')}\"\n| distinct SystemAlertId",
                                                "path": "/queryData",
                                                "queries": {
                                                    "subscriptions": "[parameters('SubscriptionId')]",
                                                    "resourcegroups": "[parameters('LogAnalyticsResourceGroup')]",
                                                    "resourcetype": "Log Analytics Workspace",
                                                    "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                                    "timerange": "14d"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable_systemalertid_query_results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "less": [
                                                    "@length(body('Query_to_get_systemalertid')?['value'])",
                                                    1
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_variable_systemalertid_query_results": {
                                    "runAfter": {
                                        "Query_to_get_systemalertid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "systemalertid_query_results",
                                        "value": "@body('Query_to_get_systemalertid')?['value']"
                                    }
                                },
                                "Query_to_get_systemalertid": {
                                    "runAfter": {
                                        "Html_to_text": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "SecurityAlert\n| where isnotempty(Entities)\n| extend MailEntities = parse_json(Entities)\n| mv-expand MailEntities\n| where MailEntities.Type == \"mailMessage\"\n| extend NetworkMessageId = tostring(MailEntities.NetworkMessageId)\n| where NetworkMessageId == \"@{variables('network_message_id')}\"\n| distinct SystemAlertId",
                                        "path": "/queryData",
                                        "queries": {
                                            "subscriptions": "[parameters('SubscriptionId')]",
                                            "resourcegroups": "[parameters('LogAnalyticsResourceGroup')]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                            "timerange": "14d"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_systemalert_id_query_results": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Send_an_email_from_a_shared_mailbox_(V2)_without_incident_url": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['office365-1']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "body": {
                                                "MailboxAddress": "[parameters('SharedMailboxAddress')]",
                                                "To": "[parameters('HTMLReportRecipient')]",
                                                "Subject": "Phishing Email Analysis",
                                                "Body": "<p class=\"editor-paragraph\"><br>@{body('Generate_HTML_report_from_JSON')}</p><p class=\"editor-paragraph\">***********</p><p class=\"editor-paragraph\"><i><b><strong class=\"editor-text-bold editor-text-italic\">Generated with AI, check for accuracy.</strong></b></i></p><p class=\"editor-paragraph\">***********</p>",
                                                "Attachments": [
                                                    {
                                                        "Name": "original_email.eml",
                                                        "ContentBytes": "@base64(body('Export_email_(V2)'))"
                                                    }
                                                ],
                                                "Importance": "Normal"
                                            },
                                            "path": "/v2/SharedMailbox/Mail"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('is_defender_incident')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Parse_Email": {
                            "runAfter": {
                                "For_each_raw_email_attached_to_carrier_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            }
                        },
                        "Normalize_JSON": {
                            "runAfter": {
                                "Security_Copilot_Email_Analysis": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Security_Copilot_Email_Analysis')?['EvaluationResultContent']",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName02'))]"
                                }
                            }
                        },
                        "Generate_HTML_report_from_JSON": {
                            "runAfter": {
                                "Parse_normalized_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Parse_normalized_JSON')",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName03'))]"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-ConnectionName'))]",
                                "connectionName": "[variables('Office365-ConnectionName')]"
                            },

                            "securitycopilot-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/securitycopilot')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-ConnectionName')]"
                            },

                            "azuresentinel": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinel-ConnectionName'))]",
                                "connectionName": "[variables('AzureSentinel-ConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "azuremonitorlogs": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogs-ConnectionName'))]",
                                "connectionName": "[variables('AzureMonitorLogs-ConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "conversionservice-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/conversionservice')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('ConversionService-ConnectionName'))]",
                                "connectionName": "[variables('ConversionService-ConnectionName')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}