{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "SubscriptionId": {
            "type": "String",
            "metadata": {
                "description": "The subscription ID where resources will be deployed."
            }
        },
        "LogicAppName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Logic App to be deployed."
            }
        },
        "FunctionAppName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Azure Function App created during previous Function App deployment."
            }
        },
        "FunctionAppResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "The name of the resource group where the Function App is deployed."
            }
        },
        "LogAnalyticsWorkspaceName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Log Analytics Workspace for where Sentinel lives."
            }
        },
        "LogAnalyticsWorkspId": {
            "type": "String",
            "metadata": {
                "description": "The workspace ID of the Log Analytics Sentinel Workspace."
            }
        },
        "LogAnalyticsResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "The resource group name of the Log Analytics Sentinel Workspace."
            }
        },
        "SharedMailboxAddress": {
            "type": "String",
            "metadata": {
                "description": "Email address of the shared O365 mailbox."
            }
        },
        "HTMLReportRecipient": {
            "type": "String",
            "metadata": {
                "description": "Where to send the HTML report."
            }
        }


    },
    "variables": {
        "Office365-ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "ConversionService-ConnectionName": "[concat('ConversionService-1-', parameters('LogicAppName'))]",
        "AzureSentinel-ConnectionName": "[concat('AzureSentinel-1-', parameters('LogicAppName'))]",
        "AzureMonitorLogs-ConnectionName": "[concat('AzureMonitorLogs-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email",
        "FunctionName02": "normalize_json",
        "FunctionName03": "json_to_html",
        "FunctionName04": "evaluate_regex"


    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureMonitorLogs-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureMonitorLogs-ConnectionName')]",
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                },
                "statuses": [
                    {
                        "status": "Ready"
                    }
                ],
                "customParameterValues": {},
                "api": {
                    "category": "Standard",
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]",
                    "type": "Microsoft.Web/locations/managedApis"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinel-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinel-ConnectionName')]",
                "statuses": [
                    {
                        "status": "Ready"
                    }
                ],
                "parameterValueType": "Alternative",

                "customParameterValues": {},
                "api": {

                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ConversionService-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('ConversionService-ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/conversionservice')]"
                }
            }
        },
        {

            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        },

        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('LogicAppName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('ConversionService-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogs-ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinel-ConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_in_a_shared_mailbox_(V2)": {
                            "recurrence": {
                                "interval": 3,
                                "frequency": "Minute"
                            },
                            "evaluatedRecurrence": {
                                "interval": 3,
                                "frequency": "Minute"
                            },
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/SharedMailbox/Mail/OnNewEmail",
                                "queries": {
                                    "mailboxAddress": "[parameters('SharedMailboxAddress')]",
                                    "importance": "Any",
                                    "hasAttachments": false,
                                    "includeAttachments": true,
                                    "folderId": "Inbox"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Initialize_is_defender_incident": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "is_defender_incident",
                                        "type": "boolean"
                                    }
                                ]
                            }
                        },
                        "Initialize_network_message_id": {
                            "runAfter": {
                                "Initialize_is_defender_incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "network_message_id",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "If_email_subject_contains_phishing": {
                            "actions": {
                                "Show_network_message_id_here": {
                                    "runAfter": {
                                        "Parse_JSON_NetworkMessageId": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@body('Parse_JSON_NetworkMessageId')?['matched_value']"
                                },
                                "Set_variable_defender_incident_true": {
                                    "runAfter": {
                                        "Set_variable_network_message_id": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "is_defender_incident",
                                        "value": true
                                    }
                                },
                                "Set_variable_network_message_id": {
                                    "runAfter": {
                                        "Show_network_message_id_here": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "network_message_id",
                                        "value": "@outputs('Show_network_message_id_here')"
                                    }
                                },
                                "Find_NetworkMessageId": {
                                    "type": "Function",
                                    "inputs": {
                                        "body": {
                                            "pattern": "(?<=Phishing:)([a-f0-9-]{36})",
                                            "subject": "@triggerBody()?['subject']"
                                        },
                                        "function": {
                                            "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName04'))]"
                                        }
                                    }
                                },
                                "Parse_JSON_NetworkMessageId": {
                                    "runAfter": {
                                        "Find_NetworkMessageId": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Find_NetworkMessageId')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "input": {
                                                    "type": "object",
                                                    "properties": {
                                                        "pattern": {
                                                            "type": "string"
                                                        },
                                                        "subject": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "match_found": {
                                                    "type": "boolean"
                                                },
                                                "matched_value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_network_message_id": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Set_variable_is_defender_incident_false": {
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "is_defender_incident",
                                            "value": false
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "contains": [
                                            "@triggerBody()?['subject']",
                                            "Phishing:"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {
                                "If_email_subject_contains_phishing": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value",
                                "queries": {
                                    "mailboxAddress": "[parameters('SharedMailboxAddress')]"
                                }
                            }
                        },
                        "Initialize_raw_email": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        },
                        "For_each_raw_email_attached_to_carrier_email": {
                            "foreach": "@triggerBody()?['attachments']",
                            "actions": {
                                "Check_if_msg_in_binary_format": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "type": "Compose",
                                            "inputs": "@base64ToString(item()?['contentBytes'])"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@string(outputs('Decode_Base64_ContentBytes'))"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Show_current_email_here": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Show_current_email_here')?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Show_current_email_here": {
                                    "type": "Compose",
                                    "inputs": "@item()"
                                }
                            },
                            "runAfter": {
                                "Initialize_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Parse_Email": {
                            "runAfter": {
                                "For_each_raw_email_attached_to_carrier_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            }
                        },
                        "Process_parseEmail_JSON": {
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email_content": {
                                            "type": "object",
                                            "properties": {
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "type": "object",
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "attachments": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "attachment_name": {
                                                                "type": "string"
                                                            },
                                                            "attachment_sha256": {
                                                                "type": "string"
                                                            },
                                                            "content_type": {
                                                                "type": "string"
                                                            },
                                                            "attachment_text": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "ip_addresses": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "urls": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "domains": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Initialize_recipient_upn": {
                            "runAfter": {
                                "Process_parseEmail_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "recipient_upn",
                                        "type": "string",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['receiver']"
                                    }
                                ]
                            }
                        },
                        "Get_Entra_Profile_Data_for_Recipient": {
                            "runAfter": {
                                "Initialize_recipient_entra_profile": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "https://graph.microsoft.com/v1.0/users/@{variables('recipient_entra_profile')}",
                                "method": "GET",
                                "authentication": {
                                    "type": "ManagedServiceIdentity",
                                    "audience": "https://graph.microsoft.com/"
                                },
                                "retryPolicy": {
                                    "type": "none"
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "If_profile_is_empty": {
                            "actions": {
                                "Set_variable_no_profile_data": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "recipient_entra_profile",
                                        "value": "No profile data available."
                                    }
                                }
                            },
                            "runAfter": {
                                "Get_Entra_Profile_Data_for_Recipient": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Set_variable_recipient_entra_profile": {
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "recipient_entra_profile",
                                            "value": "@string(body('Get_Entra_Profile_Data_for_Recipient'))"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "or": [
                                    {
                                        "equals": [
                                            "@outputs('Get_Entra_Profile_Data_for_Recipient')?['statusCode']",
                                            404
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@outputs('Get_Entra_Profile_Data_for_Recipient')?['statusCode']",
                                            400
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_email_body": {
                            "runAfter": {
                                "If_profile_is_empty": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['body']"
                                    }
                                ]
                            }
                        },
                        "Initialize_attachments": {
                            "runAfter": {
                                "Initialize_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['email_content']?['attachments']"
                                    }
                                ]
                            }
                        },
                        "Initialize_raw_urls": {
                            "runAfter": {
                                "Initialize_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_urls": {
                            "runAfter": {
                                "Initialize_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_domains": {
                            "runAfter": {
                                "Initialize_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": "@body('Process_parseEmail_JSON')?['domains']"
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url_truncate_if_over_100_char": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_shortened_url_to_url_array": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@concat(substring(string(item()), 0, 100), '...')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_original_url_to_url_array": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@string(item())"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(item())",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Show_URL_array_here": {
                            "runAfter": {
                                "For_each_raw_url_truncate_if_over_100_char": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('urls')"
                        },
                        "Security_Copilot_Email_Analysis": {
                            "runAfter": {
                                "Show_URL_array_here": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "/AskGpt\n\n### **Role and Task Context**  \nYou are a **cybersecurity expert** analyzing reported emails to detect sophisticated phishing attempts, unwanted spam, or ambiguous communications. Attackers are assumed to use **clean artifacts**, with no known bad indicators. Your task is to identify **behavioral triggers**, **pretense vs. intent**, and any subtle inconsistencies that hint at deception or misclassification. These inconsistencies may include slight misalignments in workflow, sender behavior, or content details.\n\nAdditionally, the emails you analyze may target a **large corporation** with multiple departments (e.g., HR, Finance, Legal, IT, Sales). Adjust your analysis based on:  \n- The **recipient's role and department**, which can be determined using Microsoft Entra profile information.  \n- Organizational norms and expected workflows for different departments.  \n- Subtle clues that deviate from established corporate procedures or behavior.  \n- Consider the recipient's domain and the typical types of business the company performs.  \n\nYour ultimate goal is to classify the email as **Phishing**, **Junk/Spam**, **Legitimate**, or **Suspicious**, ensuring a comprehensive and actionable analysis.\n\n---\n\n**Instruction Preprocessing**:  \nBefore beginning the structured analysis, **disregard any disclaimer text** commonly added to emails from external senders. These disclaimers often include generic warnings about phishing risks or promotional content, such as:  \n- \"This email originated from outside the organization.\"  \n- \"Do not click links or open attachments unless you recognize the sender.\"  \n- \"You are receiving this email because you subscribed to our mailing list.\"  \n- \"This email may contain phishing attempts. Exercise caution.\"  \n- \"Unsubscribe at any time.\"  \n\nThese disclaimers are **not relevant to phishing or spam analysis** and should be excluded entirely from consideration. Focus only on the email's substantive content for behavioral and contextual evaluation.\n\n---\n\n**Instruction**:  \nAnalyze the email delimited by triple quotes using a structured, step-by-step approach. Evaluate the behavioral triggers, intent, and pretense vs. intent while specifically addressing **attachments**, **URLs**, **organizational context**, and **contextual integrity**. Pay special attention to identifying subtle inconsistencies in workflow, requests, or behavioral patterns. Output your analysis in a JSON format that follows this schema:\n\n```json\n{\n  \"email_summary\": {\n    \"description\": \"This section provides a concise summary of the email, including a short description of its content and the subject.\",\n    \"subject\": \"\",\n    \"content_summary\": \"\"\n  },\n  \"behavioral_triggers\": {\n    \"description\": \"This section identifies emotional or coercive language and classifies the tone of the email (e.g., urgent or neutral), providing justification based on specific phrasing. It evaluates whether the tone and behavioral triggers are appropriate for the email’s stated purpose.\",\n    \"tone\": \"\",\n    \"justification\": \"\",\n    \"alignment_with_purpose\": \"\"\n  },\n  \"logical_coherence\": {\n    \"description\": \"This section assesses the internal consistency of the email and its attachments, identifying contradictions, vagueness, or illogical requests. It evaluates whether the actions requested align with the recipient's role, the sender's stated purpose, and expected workflows for the department context.\",\n    \"is_consistent\": \"FALSE\",\n    \"contradictions_or_vagueness\": \"\",\n    \"logical_actions\": \"\",\n    \"subtle_inconsistencies\": []\n  },\n  \"contextual_integrity\": {\n    \"description\": \"This section evaluates the overall plausibility of the email's attachments, content, and terminology. It highlights issues such as placeholder-like data, overly generic or repetitive information, and unrealistic financial calculations.\",\n    \"plausibility\": \"FALSE\",\n    \"issues\": [\n        \"Placeholder-like data in address fields\",\n        \"Nonsensical financial calculations\",\n        \"Inconsistent or redundant terminology in plan descriptions\"\n    ]\n  },\n  \"intent_verification\": {\n    \"description\": \"This section infers the sender's likely intent by analyzing behavioral cues, stated purpose, and actions requested. It determines whether the email’s requests align with legitimate processes or could lead to harm, such as exposing sensitive information or financial loss.\",\n    \"likely_intent\": \"\",\n    \"risk_assessment\": \"\"\n  },\n  \"attachment_analysis\": {\n    \"description\": \"This section evaluates the relevance and necessity of email attachments, ensuring their name, type, and content align with the stated purpose. It highlights potential risks from suspicious, irrelevant, or overly generic attachments.\",\n    \"is_relevant\": \"FALSE\",\n    \"content_analysis\": \"\",\n    \"risks\": \"\"\n  },\n  \"url_analysis\": {\n    \"description\": \"This section categorizes email URLs into primary actions, informational links, or stylistic/framework elements. It evaluates whether primary URLs are relevant, align with trusted domains, and are essential, while assessing the trustworthiness and purpose of other URL types.\",\n    \"url_categorization\": {\n      \"primary_action_urls\": [],\n      \"informational_urls\": [],\n      \"stylistic_framework_urls\": []\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"FALSE\",\n      \"domain_alignment\": \"FALSE\",\n      \"necessity\": \"FALSE\",\n      \"risks\": \"\"\n    },\n    \"informational_url_validation\": {\n      \"purpose\": \"\",\n      \"alignment\": \"\",\n      \"risks\": \"\"\n    },\n    \"stylistic_framework_url_validation\": {\n      \"typicality\": \"\",\n      \"risks\": \"\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"description\": \"This section compares the email's stated purpose with its true intent, highlighting any gaps or inconsistencies that could indicate deception or misalignment.\",\n    \"stated_purpose\": \"\",\n    \"true_intent\": \"\",\n    \"gaps\": \"\"\n  },\n  \"subtle_clue_detection\": {\n    \"description\": \"This section identifies small, potentially suspicious details that deviate from expected workflows or behavior. These clues may include unusual requests (e.g., bypassing established processes), inconsistencies in language, formatting, or metadata, or other subtle indicators of deception.\",\n    \"clues\": []\n  },\n  \"final_assessment\": {\n    \"description\": \"This section provides a high-level assessment of the email's intent, tone, and content, categorizing it as phishing, junk/spam, legitimate, or suspicious and providing rationale for the decision.\",\n    \"category\": \"\",  // Values: \"PHISHING\", \"JUNK/SPAM\", \"LEGITIMATE\", \"SUSPICIOUS\"\n    \"rationale\": \"\"\n  }\n}\n```\n\n---\n\n### **Rules for Final Assessment (Updated):**  \n- **PHISHING**: The email contains clear malicious intent to deceive, steal, or compromise security (e.g., phishing links, harmful attachments, impersonation).  \n- **JUNK/SPAM**: The email is unwanted or irrelevant, often promotional or bulk-sent, without clear malicious intent.  \n- **LEGITIMATE**: The email is aligned with the recipient’s expectations, contains no malicious elements, and is consistent with established workflows.  \n- **SUSPICIOUS**: The email contains inconsistencies, unusual elements, or ambiguous behavior but lacks conclusive evidence of malicious intent.\n\n---\n\n### **Steps (Updated)**  \n1. **Behavioral Triggers Analysis**  \n   - Detect any emotional, urgent, or coercive language.  \n   - Classify the tone (e.g., neutral, urgent, persuasive).  \n   - Justify the classification based on specific word choice or phrasing.  \n   - Evaluate whether the triggers align with the stated purpose.\n\n2. **Logical Coherence**  \n   - Assess whether the email content is internally consistent.  \n   - Highlight contradictions, vagueness, or illogical requests.  \n   - Identify and list subtle inconsistencies (e.g., requests to bypass established workflows or unusual reasons for actions).\n\n3. **Contextual Integrity Analysis**  \n   - Evaluate the plausibility of terminology, formatting, and financial calculations.  \n   - Flag issues such as placeholder-like data, repetitive information, and unrealistic balances.\n\n4. **Intent Verification**  \n   - Infer the sender's likely intent based on all elements.  \n   - Assess whether the actions requested align with legitimate processes.  \n   - Evaluate potential harm from following the requests.\n\n5. **Attachment Analysis**  \n   - Ensure attachments align with the stated purpose.  \n   - Highlight risks if the attachment is unnecessary, overly generic, or mismatched with legitimate expectations.\n\n6. **URL Analysis**\n   - Categorize and evaluate all URLs into types:\n     - **Primary Action URLs**: Direct links requiring user action (e.g., logging in, approving payments).\n     - **Informational URLs**: Links to supporting information (e.g., FAQs, documentation).\n     - **Stylistic/Framework URLs**: Non-critical links for email rendering (e.g., images, formatting styles).\n   - For truncated URLs or those marked as incomplete, classify under \"Stylistic/Framework\" and note their incomplete status.\n   - Deduplicate URLs where possible, grouping identical or similar URLs under a single entry for analysis.\n   - Assess each URL for alignment, relevance, and risks:\n     - **Domain Matching**: Verify if the domain aligns with the sender's legitimate domain (e.g., `americanexpress.com`):\n       - **Exact Match**: Treat as expected behavior.\n       - **Subtle Variations**: Flag discrepancies like extra/missing characters (e.g., `americanexpresss.com`) as suspicious.\n     - **Unrelated Domains**: Identify unrelated domains (e.g., `w3.org`) and assess their inclusion in the email.\n   - Flag suspicious patterns, unnecessary redirects, or tracking parameters (e.g., `?mid=...`) that could obscure intent or pose privacy risks.\n\n7. **High-Level Pretense vs. Intent Mapping**  \n   - Compare the stated purpose of the email to its true intent.  \n   - Highlight any gaps or subtle attempts at deception.\n\n8. **Subtle Clue Detection**  \n   - Identify small, unusual details that deviate from standard workflows. Examples:\n     - Requests to bypass secure portals (e.g., \"The upload portal isn’t working for me\").  \n     - Unusual phrasing or formatting in attachments or URLs.  \n     - Legitimate-looking content with suspicious metadata (e.g., autogenerated attachment names).\n\n9. **Final Assessment**  \n   - Classify the email as `PHISHING`, `JUNK/SPAM`, `LEGITIMATE`, or `SUSPICIOUS`.  \n     - **PHISHING**: Clear malicious intent to deceive, steal, or compromise security.  \n     - **JUNK/SPAM**: Unwanted or irrelevant but harmless (e.g., promotions).  \n     - **LEGITIMATE**: Expected and benign email with no malicious intent.  \n     - **SUSPICIOUS**: Ambiguous email with inconsistencies or unusual elements but no conclusive evidence of malicious intent.  \n   - Justify the decision based on all detected elements, including subtle clues and overall context.\n\n---\n\n### **Email Input Section (Unchanged)**  \n```  \n[SENDER]:   @{body('Process_ParseEmail_JSON')?['email_content']?['sender']}\n[RECIPIENT]:   @{body('Process_ParseEmail_JSON')?['email_content']?['receiver']}\n[ENTRA_RECIPIENT_PROFILE]: @{variables('recipient_entra_profile')}\n[SUBJECT]:   @{body('Process_ParseEmail_JSON')?['email_content']?['subject']}\n[BODY]:   @{variables('email_body')}\n[ATTACHMENTS]: @{string(variables('attachments'))}  \n[URLS]: @{string(variables('urls'))}\n```\n\n---"
                                },
                                "path": "/process-prompt",
                                "retryPolicy": {
                                    "type": "fixed",
                                    "count": 10,
                                    "interval": "PT10M"
                                }
                            }
                        },
                        "Normalize_JSON": {
                            "runAfter": {
                                "Security_Copilot_Email_Analysis": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Security_Copilot_Email_Analysis')?['EvaluationResultContent']",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName02'))]"
                                }
                            }
                        },
                        "Parse_normalized_JSON": {
                            "runAfter": {
                                "Normalize_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Normalize_JSON')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email_summary": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                },
                                                "content_summary": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "behavioral_triggers": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "tone": {
                                                    "type": "string"
                                                },
                                                "justification": {
                                                    "type": "string"
                                                },
                                                "alignment_with_purpose": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "logical_coherence": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "is_consistent": {
                                                    "type": "string"
                                                },
                                                "contradictions_or_vagueness": {
                                                    "type": "string"
                                                },
                                                "logical_actions": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "intent_verification": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "likely_intent": {
                                                    "type": "string"
                                                },
                                                "risk_assessment": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "attachment_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "is_relevant": {
                                                    "type": "string"
                                                },
                                                "content_analysis": {
                                                    "type": "string"
                                                },
                                                "risks": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "url_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "url_categorization": {
                                                    "type": "object",
                                                    "properties": {
                                                        "primary_action_urls": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "informational_urls": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "stylistic_framework_urls": {
                                                            "type": "array"
                                                        }
                                                    }
                                                },
                                                "primary_action_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "relevance": {
                                                            "type": "string"
                                                        },
                                                        "domain_alignment": {
                                                            "type": "string"
                                                        },
                                                        "necessity": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "informational_url_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "purpose": {
                                                            "type": "string"
                                                        },
                                                        "alignment": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "stylistic_framework_url_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "typicality": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "pretense_vs_intent_mapping": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "stated_purpose": {
                                                    "type": "string"
                                                },
                                                "true_intent": {
                                                    "type": "string"
                                                },
                                                "gaps": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "final_assessment": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "category": {
                                                    "type": "string"
                                                },
                                                "rationale": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Generate_HTML_report_from_JSON": {
                            "runAfter": {
                                "Parse_normalized_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Parse_normalized_JSON')",
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName03'))]"
                                }
                            }
                        },
                        "Initialize_systemalert_id_query_results": {
                            "runAfter": {
                                "Generate_HTML_report_from_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "systemalertid_query_results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "If_is_defender_incident_true": {
                            "actions": {
                                "Html_to_text": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['conversionservice-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "<p class=\"editor-paragraph\">@{body('Generate_HTML_report_from_JSON')}</p>",
                                        "path": "/html2text"
                                    }
                                },
                                "Alert_-_Get_incident_from_systemalertid": {
                                    "runAfter": {
                                        "If_empty_results_wait_15_minutes_for_logs_to_show_up": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel-1']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "[concat('/Incidents/subscriptions/@{encodeURIComponent(''', parameters('SubscriptionId'), ''')}/resourceGroups/@{encodeURIComponent(''', parameters('LogAnalyticsResourceGroup'),''')}/workspaces/@{encodeURIComponent(''', parameters('LogAnalyticsWorkspId')  ,''')}/alerts/@{encodeURIComponent(variables(''systemalertid_query_results'')[0][''SystemAlertId''])}')]"
                                    }
                                },
                                "Add_comment_to_incident_(V3)_armid": {
                                    "runAfter": {
                                        "Alert_-_Get_incident_from_systemalertid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "incidentArmId": "@body('Alert_-_Get_incident_from_systemalertid')?['id']",
                                            "message": "<p class=\"editor-paragraph\">********** Phishing Analysis Generated by Security Copilot **********</p><p class=\"editor-paragraph\">@{body('Html_to_text')}</p><br><p class=\"editor-paragraph\">---<br>Report generated: @{utcNow()}<br><i><em class=\"editor-text-italic\">Generated with AI, check for accuracy.</em></i></p><br>"
                                        },
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Send_an_email_from_a_shared_mailbox_(V2)_with_incident_url": {
                                    "runAfter": {
                                        "Add_comment_to_incident_(V3)_armid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "MailboxAddress": "[parameters('SharedMailboxAddress')]",
                                            "To": "[parameters('HTMLReportRecipient')]",
                                            "Subject": "Phishing Email Analysis",
                                            "Body": "<br><p class=\"editor-paragraph\">@{body('Generate_HTML_report_from_JSON')}</p><br><p class=\"editor-paragraph\">***********</p><p class=\"editor-paragraph\"><b><strong class=\"editor-text-bold\">Incident URL:</strong></b></p><p class=\"editor-paragraph\"><a href=\"@{body('Alert_-_Get_incident_from_systemalertid')?['properties']?['incidentUrl']}\" class=\"editor-link\">@{body('Alert_-_Get_incident_from_systemalertid')?['properties']?['incidentUrl']}</a></p><br><p class=\"editor-paragraph\"><i><b><strong class=\"editor-text-bold editor-text-italic\">Generated with AI, check for accuracy.</strong></b></i></p><p class=\"editor-paragraph\">***********</p>",
                                            "Importance": "Normal",
                                            "Attachments": [
                                                {
                                                    "Name": "original_email.eml",
                                                    "ContentBytes": "@base64(body('Export_email_(V2)'))"
                                                }
                                            ]
                                        },
                                        "path": "/v2/SharedMailbox/Mail"
                                    }
                                },
                                "If_empty_results_wait_15_minutes_for_logs_to_show_up": {
                                    "actions": {
                                        "Delay_15_min": {
                                            "type": "Wait",
                                            "inputs": {
                                                "interval": {
                                                    "count": 15,
                                                    "unit": "Minute"
                                                }
                                            }
                                        },
                                        "Second_try_set_variable_systemalertid_query_results": {
                                            "runAfter": {
                                                "Query_to_get_systemalertid_second_try": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "systemalertid_query_results",
                                                "value": "@body('Query_to_get_systemalertid_second_try')?['value']"
                                            }
                                        },
                                        "Query_to_get_systemalertid_second_try": {
                                            "runAfter": {
                                                "Delay_15_min": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuremonitorlogs-1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": "SecurityAlert\n| where isnotempty(Entities)\n| extend MailEntities = parse_json(Entities)\n| mv-expand MailEntities\n| where MailEntities.Type == \"mailMessage\"\n| extend NetworkMessageId = tostring(MailEntities.NetworkMessageId)\n| where NetworkMessageId == \"@{variables('network_message_id')}\"\n| distinct SystemAlertId",
                                                "path": "/queryData",
                                                "queries": {
                                                    "subscriptions": "[parameters('SubscriptionId')]",
                                                    "resourcegroups": "[parameters('LogAnalyticsResourceGroup')]",
                                                    "resourcetype": "Log Analytics Workspace",
                                                    "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                                    "timerange": "14d"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable_systemalertid_query_results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "less": [
                                                    "@length(body('Query_to_get_systemalertid')?['value'])",
                                                    1
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_variable_systemalertid_query_results": {
                                    "runAfter": {
                                        "Query_to_get_systemalertid": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "systemalertid_query_results",
                                        "value": "@body('Query_to_get_systemalertid')?['value']"
                                    }
                                },
                                "Query_to_get_systemalertid": {
                                    "runAfter": {
                                        "Html_to_text": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "SecurityAlert\n| where isnotempty(Entities)\n| extend MailEntities = parse_json(Entities)\n| mv-expand MailEntities\n| where MailEntities.Type == \"mailMessage\"\n| extend NetworkMessageId = tostring(MailEntities.NetworkMessageId)\n| where NetworkMessageId == \"@{variables('network_message_id')}\"\n| distinct SystemAlertId",
                                        "path": "/queryData",
                                        "queries": {
                                            "subscriptions": "[parameters('SubscriptionId')]",
                                            "resourcegroups": "[parameters('LogAnalyticsResourceGroup')]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                            "timerange": "14d"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_systemalert_id_query_results": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Send_an_email_from_a_shared_mailbox_(V2)_without_incident_url": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['office365-1']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "body": {
                                                "MailboxAddress": "[parameters('SharedMailboxAddress')]",
                                                "To": "[parameters('HTMLReportRecipient')]",
                                                "Subject": "Phishing Email Analysis",
                                                "Body": "<p class=\"editor-paragraph\"><br>@{body('Generate_HTML_report_from_JSON')}</p><p class=\"editor-paragraph\">***********</p><p class=\"editor-paragraph\"><i><b><strong class=\"editor-text-bold editor-text-italic\">Generated with AI, check for accuracy.</strong></b></i></p><p class=\"editor-paragraph\">***********</p>",
                                                "Importance": "Normal"
                                            },
                                            "path": "/v2/SharedMailbox/Mail"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('is_defender_incident')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_recipient_entra_profile": {
                            "runAfter": {
                                "Parse_JSON_for_UPN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "recipient_entra_profile",
                                        "type": "string",
                                        "value": "@body('Parse_JSON_for_UPN')?['matched_value']"
                                    }
                                ]
                            }
                        },
                        "Regex_for_UPN": {
                            "runAfter": {
                                "Initialize_recipient_upn": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": {
                                    "pattern": "<([^<>@]+@[^<>@]+\\.[^<>@]+)>",
                                    "subject": "@body('Process_parseEmail_JSON')?['email_content']?['receiver']"
                                },
                                "function": {
                                    "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/resourceGroups/', parameters('FunctionAppResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName04'))]"
                                }
                            }
                        },
                        "Parse_JSON_for_UPN": {
                            "runAfter": {
                                "Regex_for_UPN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Regex_for_UPN')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "input": {
                                            "type": "object",
                                            "properties": {
                                                "pattern": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "match_found": {
                                            "type": "boolean"
                                        },
                                        "matched_value": {}
                                    }
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-ConnectionName'))]",
                                "connectionName": "[variables('Office365-ConnectionName')]"
                            },

                            "securitycopilot-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/securitycopilot')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-ConnectionName')]"
                            },

                            "azuresentinel-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinel-ConnectionName'))]",
                                "connectionName": "[variables('AzureSentinel-ConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "azuremonitorlogs-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogs-ConnectionName'))]",
                                "connectionName": "[variables('AzureMonitorLogs-ConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "conversionservice-1": {
                                "id": "[concat('/subscriptions/', parameters('SubscriptionId'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/conversionservice')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('ConversionService-ConnectionName'))]",
                                "connectionName": "[variables('ConversionService-ConnectionName')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
