{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
            "type": "string"
        }
    },
    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-ConnectionName": "[concat('Securitycopilot-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email",
        "FunctionName02": "parse_pdf",
        "FunctionName03": "normalize_json",
        "FunctionName04": "json_to_html"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Inbox"
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@listCallbackUrl()"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Inbox"
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Show_results_here": {
                            "runAfter": {
                                "Do_we_have_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@if(empty(body('Analyze_Email_w_Attachments')?['EvaluationResultContent']), body('Analyze_Email_without_Attachments')?['EvaluationResultContent'], body('Analyze_Email_w_Attachments')?['EvaluationResultContent'])"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            }
                        },
                        "Function_parseemail": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Export_email_(V2)')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            }
                        },
                        "Process_ParseEmail_JSON": {
                            "runAfter": {
                                "Function_parseemail": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Function_parseemail')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email_content": {
                                            "type": "object",
                                            "properties": {
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "type": "object",
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "attachments": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "attachment_name": {
                                                                "type": "string"
                                                            },
                                                            "attachment_sha256": {
                                                                "type": "string"
                                                            },
                                                            "content_type": {
                                                                "type": "string"
                                                            },
                                                            "attachment_text": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "attachment_name",
                                                            "attachment_sha256",
                                                            "content_type"
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        "ip_addresses": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "urls": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "domains": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Initialize_variable_raw_urls": {
                            "runAfter": {
                                "Process_ParseEmail_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_ParseEmail_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_urls": {
                            "runAfter": {
                                "Initialize_variable_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_attachments": {
                            "runAfter": {
                                "Initialize_variable_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url_truncate_if_too_long": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "If_URL_length_greater_than_100": {
                                    "actions": {
                                        "Append_truncated_url_to_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@concat(substring(string(item()), 0, 100), '...')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_original_url_to_array": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@string(item())"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(item())",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_email_body": {
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_ParseEmail_JSON')?['email_content']?['body']"
                                    }
                                ]
                            }
                        },
                        "Do_we_have_attachments": {
                            "actions": {
                                "Set_variable_attachments": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "attachments",
                                        "value": "@body('Process_ParseEmail_JSON')?['email_content']?['attachments']"
                                    }
                                },
                                "Show_prompt_output_w_attachments": {
                                    "runAfter": {
                                        "Analyze_Email_w_Attachments": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@body('Analyze_Email_w_Attachments')?['EvaluationResultContent']"
                                },
                                "Analyze_Email_w_Attachments": {
                                    "runAfter": {
                                        "Set_variable_attachments": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "/AskGpt\n\n**Role and Task Context**:  \nYou are a **cybersecurity expert** analyzing reported emails to detect sophisticated phishing attempts. Attackers are assumed to use **clean artifacts**, with no known bad indicators. Focus on assessing **behavioral triggers**, **pretense vs. intent**, and the context of attachments and URLs. Analyze whether these elements are consistent with the stated purpose, relationship, and intent of the email.\n\n---\n\n**Instruction**:  \nAnalyze the email delimited by triple quotes using a structured, step-by-step approach. Evaluate the behavioral triggers, intent, and pretense vs. intent while specifically addressing **attachments** and **URLs**. Output your analysis in a JSON format that follows this schema:\n\n```json\n{\n  \"email_summary\": {\n    \"description\": \"This section provides a concise summary of the email, including a short description of its content and the subject.\",\n    \"subject\": \"\",\n    \"content_summary\": \"\"\n  },\n  \"behavioral_triggers\": {\n    \"description\": \"This section identifies emotional or coercive language and classifies the tone of the email (e.g., urgent or neutral), providing justification based on specific phrasing. It evaluates whether the tone and behavioral triggers are appropriate for the email’s stated purpose.\",\n    \"tone\": \"\",\n    \"justification\": \"\",\n    \"alignment_with_purpose\": \"\"\n  },\n  \"logical_coherence\": {\n    \"description\": \"This section assesses the internal consistency of the email, identifying contradictions, vagueness, or illogical requests. It evaluates whether the actions requested align with the recipient's role and the sender's stated purpose.\",\n    \"is_consistent\": \"FALSE\",\n    \"contradictions_or_vagueness\": \"\",\n    \"logical_actions\": \"\"\n  },\n  \"intent_verification\": {\n    \"description\": \"This section infers the sender's likely intent by analyzing behavioral cues, stated purpose, and actions requested. It determines whether the email’s requests align with legitimate processes or could lead to harm, such as exposing sensitive information or financial loss.\",\n    \"likely_intent\": \"\",\n    \"risk_assessment\": \"\"\n  },\n  \"attachment_analysis\": {\n    \"description\": \"This section evaluates the relevance and necessity of email attachments, ensuring their name, type, and content align with the stated purpose. It highlights potential risks from suspicious, irrelevant, or overly generic attachments.\",\n    \"is_relevant\": \"FALSE\",\n    \"content_analysis\": \"\",\n    \"risks\": \"\"\n  },\n  \"url_analysis\": {\n    \"description\": \"This section categorizes email URLs into primary actions, informational links, or stylistic/framework elements. It evaluates whether primary URLs are relevant, align with trusted domains, and are essential, while assessing the trustworthiness and purpose of other URL types.\",\n    \"url_categorization\": {\n      \"primary_action_urls\": [],\n      \"informational_urls\": [],\n      \"stylistic_framework_urls\": []\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"FALSE\",\n      \"domain_alignment\": \"FALSE\",\n      \"necessity\": \"FALSE\",\n      \"risks\": \"\"\n    },\n    \"informational_url_validation\": {\n      \"purpose\": \"\",\n      \"alignment\": \"\",\n      \"risks\": \"\"\n    },\n    \"stylistic_framework_url_validation\": {\n      \"typicality\": \"\",\n      \"risks\": \"\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"description\": \"This section compares the email's stated purpose with its true intent, highlighting any gaps or inconsistencies that could indicate deception or misalignment.\",\n    \"stated_purpose\": \"\",\n    \"true_intent\": \"\",\n    \"gaps\": \"\"\n  },\n  \"final_assessment\": {\n    \"description\": \"This section provides a high-level assessment of the email's intent, tone, and content, categorizing it as benign, suspicious, or malicious and providing rationale for the decision.\",\n    \"category\": \"\",\n    \"rationale\": \"\"\n  }\n}\n```\n\n**Rules for Final Assessment**:  \n- **BENIGN**: The email is aligned with its stated purpose, contains no suspicious behavior, and no elements (e.g., attachments, URLs) suggest malicious intent.  \n- **SUSPICIOUS**: The email contains inconsistencies or unusual elements (e.g., behavioral triggers, suspicious URLs) but lacks clear evidence of malicious intent.  \n- **MALICIOUS**: The email is clearly designed to deceive the recipient, with strong evidence of malicious intent (e.g., phishing links, harmful attachments, impersonation).  \n\nEnsure the `final_assessment.category` field is always one of the following values: `BENIGN`, `SUSPICIOUS`, or `MALICIOUS`.\n\n---\n\n**Steps**:  \n1. **Behavioral Triggers Analysis**:  \n   - Detect any emotional, urgent, or coercive language.  \n   - Classify the tone (e.g., neutral, urgent, fearful, persuasive).  \n   - Justify your classification based on word choice, phrasing, or overall tone.  \n   - Evaluate whether the behavioral triggers align with the stated purpose.\n\n2. **Logical Coherence**:  \n   - Assess whether the email content is internally consistent.  \n   - Highlight any contradictions, vagueness, or implausibility in the email's language, structure, or requested actions.  \n   - Determine if the requested actions are logical for the recipient's role and the sender’s stated purpose.\n\n3. **Intent Verification**:  \n   - Infer the sender’s likely intent based on the behavioral cues, stated purpose, and requested actions.  \n   - Assess whether acting on the email benefits the recipient or aligns with legitimate processes.  \n   - Determine whether the email’s actions could result in harm (e.g., exposing sensitive information, financial loss).\n\n4. **Attachment Analysis**:  \n   - Evaluate the relevance of the attachments to the email's stated purpose:  \n     - Is the attachment necessary for the requested action or information?  \n     - Does its **name**, **content type**, and **text** align with the purpose?  \n   - Highlight risks if the attachment is unnecessary, overly general, or contains suspicious content.  \n\n5. **URL Analysis**:  \n   - Categorize each URL in the email body:  \n     - **Primary Action**: Links critical to fulfilling the stated purpose of the email (e.g., a button to confirm or login).  \n     - **Informational**: Supplemental links, such as privacy policies or external references.  \n     - **Stylistic/Framework**: Non-actionable links, such as those used for email formatting.  \n   - For **Primary Action URLs**:  \n     - Assess relevance to the sender’s stated purpose.  \n     - Confirm alignment with trusted domains or organizations.  \n     - Determine if the URL is essential for completing the requested action.  \n     - Highlight risks of misalignment, unnecessary redirections, or obfuscation.  \n   - For **Informational URLs**:  \n     - Verify if the link serves its stated purpose and points to a known, trusted source.  \n   - For **Stylistic/Framework URLs**:  \n     - Confirm these align with typical email frameworks and do not redirect to unknown destinations.  \n\n6. **High-Level Pretense vs. Intent Mapping**:  \n   - Compare the **stated purpose** of the email to its **true intent**.  \n   - Highlight any gaps or discrepancies between the purpose and intent.  \n\n7. **Final Assessment**:  \n   - **Category**: Classify the email as `BENIGN`, `SUSPICIOUS`, or `MALICIOUS`.  \n   - **Rationale**: Provide a concise explanation based on all analyzed factors.  \n\n---\n\n**Email Input (Delimited by Triple Quotes)**:  \n```  \n[SENDER]: @{body('Process_ParseEmail_JSON')?['email_content']?['sender']}  \n[RECIPIENT]: @{body('Process_ParseEmail_JSON')?['email_content']?['receiver']}  \n[SUBJECT]: @{body('Process_ParseEmail_JSON')?['email_content']?['subject']}  \n[BODY]: @{body('Process_ParseEmail_JSON')?['email_content']?['body']}  \n[ATTACHMENTS]: @{string(variables('attachments'))}  \n[URLS]: @{string(variables('urls'))}\n```\n\n---\n\n**Output Example in JSON Format**:\n\n```json\n{\n  \"behavioral_triggers\": {\n    \"description\": \"This section identifies emotional or coercive language and classifies the tone of the email (e.g., urgent or neutral), providing justification based on specific phrasing. It evaluates whether the tone and behavioral triggers are appropriate for the email’s stated purpose.\",\n    \"tone\": \"Neutral\",\n    \"justification\": \"The email language is professional and lacks urgency.\",\n    \"alignment_with_purpose\": \"Yes, it aligns with the email’s stated purpose of providing rental information.\"\n  },\n  \"logical_coherence\": {\n    \"description\": \"This section assesses the internal consistency of the email, identifying contradictions, vagueness, or illogical requests. It evaluates whether the actions requested align with the recipient's role and the sender's stated purpose.\",\n    \"is_consistent\": \"TRUE\",\n    \"contradictions_or_vagueness\": \"None identified.\",\n    \"logical_actions\": \"The email requests actions consistent with its purpose.\"\n  },\n  \"intent_verification\": {\n    \"description\": \"This section infers the sender's likely intent by analyzing behavioral cues, stated purpose, and actions requested. It determines whether the email’s requests align with legitimate processes or could lead to harm, such as exposing sensitive information or financial loss.\",\n    \"likely_intent\": \"Provide rental agreement details.\",\n    \"risk_assessment\": \"Minimal risk based on the content and links.\"\n  },\n  \"attachment_analysis\": {\n    \"description\": \"This section evaluates the relevance and necessity of email attachments, ensuring their name, type, and content align with the stated purpose. It highlights potential risks from suspicious, irrelevant, or overly generic attachments.\",\n    \"is_relevant\": \"TRUE\",\n    \"content_analysis\": \"The attachment matches the email’s stated purpose of providing the rental agreement.\",\n    \"risks\": \"NONE\"\n  },\n  \"url_analysis\": {\n    \"description\": \"This section categorizes email URLs into primary actions, informational links, or stylistic/framework elements. It evaluates whether primary URLs are relevant, align with trusted domains, and are essential, while assessing the trustworthiness and purpose of other URL types.\",\n    \"url_categorization\": {\n      \"primary_action_urls\": [\n        \"https://secure-rental-agreements.com\"\n      ],\n      \"informational_urls\": [\n        \"https://privacy.ehi.com\"\n      ],\n      \"stylistic_framework_urls\": [\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\n      ]\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"TRUE\",\n      \"domain_alignment\": \"TRUE\",\n      \"necessity\": \"TRUE\",\n      \"risks\": \"NONE\"\n    },\n    \"informational_url_validation\": {\n      \"purpose\": \"Privacy policy.\",\n      \"alignment\": \"Matches the sender organization.\",\n      \"risks\": \"NONE\"\n    },\n    \"stylistic_framework_url_validation\": {\n      \"typicality\": \"Consistent with common email formatting.\",\n      \"risks\": \"NONE\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"description\": \"This section compares the email's stated purpose with its true intent, highlighting any gaps or inconsistencies that could indicate deception or misalignment.\",\n    \"stated_purpose\": \"Provide rental agreement details.\",\n    \"true_intent\": \"Provide rental agreement details.\",\n    \"gaps\": \"NONE\"\n  },\n  \"final_assessment\": {\n    \"description\": \"This section provides a high-level assessment of the email's intent, tone, and content, categorizing it as benign, suspicious, or malicious and providing rationale for the decision.\",\n    \"category\": \"BENIGN\",\n    \"rationale\": \"All elements of the email align with its stated purpose and intent.\"\n  }\n}\n```"
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "For_each_raw_url_truncate_if_too_long": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Show_prompt_output_wout_attachments": {
                                        "runAfter": {
                                            "Analyze_Email_without_Attachments": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Compose",
                                        "inputs": "@body('Analyze_Email_without_Attachments')?['EvaluationResultContent']"
                                    },
                                    "Analyze_Email_without_Attachments": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['securitycopilot']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "body": {
                                                "PromptContent": "/AskGpt\n\n**Role and Task Context**:  \nYou are a **cybersecurity expert** analyzing reported emails to detect sophisticated phishing attempts. Attackers are assumed to use **clean artifacts**, with no known bad indicators. Focus on assessing **behavioral triggers**, **pretense vs. intent**, and the context of attachments and URLs. Analyze whether these elements are consistent with the stated purpose, relationship, and intent of the email.\n\n---\n\n**Instruction**:  \nAnalyze the email delimited by triple quotes using a structured, step-by-step approach. Evaluate the behavioral triggers, intent, and pretense vs. intent while specifically addressing **attachments** and **URLs**. Output your analysis in a JSON format that follows this schema:\n\n```json\n{\n  \"email_summary\": {\n    \"description\": \"This section provides a concise summary of the email, including a short description of its content and the subject.\",\n    \"subject\": \"\",\n    \"content_summary\": \"\"\n  },\n  \"behavioral_triggers\": {\n    \"description\": \"This section identifies emotional or coercive language and classifies the tone of the email (e.g., urgent or neutral), providing justification based on specific phrasing. It evaluates whether the tone and behavioral triggers are appropriate for the email’s stated purpose.\",\n    \"tone\": \"\",\n    \"justification\": \"\",\n    \"alignment_with_purpose\": \"\"\n  },\n  \"logical_coherence\": {\n    \"description\": \"This section assesses the internal consistency of the email, identifying contradictions, vagueness, or illogical requests. It evaluates whether the actions requested align with the recipient's role and the sender's stated purpose.\",\n    \"is_consistent\": \"FALSE\",\n    \"contradictions_or_vagueness\": \"\",\n    \"logical_actions\": \"\"\n  },\n  \"intent_verification\": {\n    \"description\": \"This section infers the sender's likely intent by analyzing behavioral cues, stated purpose, and actions requested. It determines whether the email’s requests align with legitimate processes or could lead to harm, such as exposing sensitive information or financial loss.\",\n    \"likely_intent\": \"\",\n    \"risk_assessment\": \"\"\n  },\n  \"attachment_analysis\": {\n    \"is_relevant\": \"FALSE\",\n    \"content_analysis\": \"\",\n    \"risks\": \"\"\n  },\n  \"url_analysis\": {\n    \"url_categorization\": {\n      \"primary_action_urls\": [],\n      \"informational_urls\": [],\n      \"stylistic_framework_urls\": []\n    },\n  },\n  \"url_analysis\": {\n    \"description\": \"This section categorizes email URLs into primary actions, informational links, or stylistic/framework elements. It evaluates whether primary URLs are relevant, align with trusted domains, and are essential, while assessing the trustworthiness and purpose of other URL types.\",\n    \"url_categorization\": {\n      \"primary_action_urls\": [],\n      \"informational_urls\": [],\n      \"stylistic_framework_urls\": []\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"FALSE\",\n      \"domain_alignment\": \"FALSE\",\n      \"necessity\": \"FALSE\",\n      \"risks\": \"\"\n    },\n    \"informational_url_validation\": {\n      \"purpose\": \"\",\n      \"alignment\": \"\",\n      \"risks\": \"\"\n    },\n    \"stylistic_framework_url_validation\": {\n      \"typicality\": \"\",\n      \"risks\": \"\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"description\": \"This section compares the email's stated purpose with its true intent, highlighting any gaps or inconsistencies that could indicate deception or misalignment.\",\n    \"stated_purpose\": \"\",\n    \"true_intent\": \"\",\n    \"gaps\": \"\"\n  },\n  \"final_assessment\": {\n    \"description\": \"This section provides a high-level assessment of the email's intent, tone, and content, categorizing it as benign, suspicious, or malicious and providing rationale for the decision.\",\n    \"category\": \"\",\n    \"rationale\": \"\"\n  }\n}\n```\n\n**Rules for Final Assessment**:  \n- **BENIGN**: The email is aligned with its stated purpose, contains no suspicious behavior, and no elements (e.g., attachments, URLs) suggest malicious intent.  \n- **SUSPICIOUS**: The email contains inconsistencies or unusual elements (e.g., behavioral triggers, suspicious URLs) but lacks clear evidence of malicious intent.  \n- **MALICIOUS**: The email is clearly designed to deceive the recipient, with strong evidence of malicious intent (e.g., phishing links, harmful attachments, impersonation).  \n\nEnsure the `final_assessment.category` field is always one of the following values: `BENIGN`, `SUSPICIOUS`, or `MALICIOUS`.\n\n---\n\n**Steps**:  \n1. **Behavioral Triggers Analysis**:  \n   - Detect any emotional, urgent, or coercive language.  \n   - Classify the tone (e.g., neutral, urgent, fearful, persuasive).  \n   - Justify your classification based on word choice, phrasing, or overall tone.  \n   - Evaluate whether the behavioral triggers align with the stated purpose.\n\n2. **Logical Coherence**:  \n   - Assess whether the email content is internally consistent.  \n   - Highlight any contradictions, vagueness, or implausibility in the email's language, structure, or requested actions.  \n   - Determine if the requested actions are logical for the recipient's role and the sender’s stated purpose.\n\n3. **Intent Verification**:  \n   - Infer the sender’s likely intent based on the behavioral cues, stated purpose, and requested actions.  \n   - Assess whether acting on the email benefits the recipient or aligns with legitimate processes.  \n   - Determine whether the email’s actions could result in harm (e.g., exposing sensitive information, financial loss).\n\n4. **Attachment Analysis**:  \n   - Evaluate the relevance of the attachments to the email's stated purpose:  \n     - Is the attachment necessary for the requested action or information?  \n     - Does its **name**, **content type**, and **text** align with the purpose?  \n   - Highlight risks if the attachment is unnecessary, overly general, or contains suspicious content.  \n\n5. **URL Analysis**:  \n   - Categorize each URL in the email body:  \n     - **Primary Action**: Links critical to fulfilling the stated purpose of the email (e.g., a button to confirm or login).  \n     - **Informational**: Supplemental links, such as privacy policies or external references.  \n     - **Stylistic/Framework**: Non-actionable links, such as those used for email formatting.  \n   - For **Primary Action URLs**:  \n     - Assess relevance to the sender’s stated purpose.  \n     - Confirm alignment with trusted domains or organizations.  \n     - Determine if the URL is essential for completing the requested action.  \n     - Highlight risks of misalignment, unnecessary redirections, or obfuscation.  \n   - For **Informational URLs**:  \n     - Verify if the link serves its stated purpose and points to a known, trusted source.  \n   - For **Stylistic/Framework URLs**:  \n     - Confirm these align with typical email frameworks and do not redirect to unknown destinations.  \n\n6. **High-Level Pretense vs. Intent Mapping**:  \n   - Compare the **stated purpose** of the email to its **true intent**.  \n   - Highlight any gaps or discrepancies between the purpose and intent.  \n\n7. **Final Assessment**:  \n   - **Category**: Classify the email as `BENIGN`, `SUSPICIOUS`, or `MALICIOUS`.  \n   - **Rationale**: Provide a concise explanation based on all analyzed factors.  \n\n---\n\n**Email Input (Delimited by Triple Quotes)**:  \n```  \n[SENDER]: @{body('Process_ParseEmail_JSON')?['email_content']?['sender']}  \n[RECIPIENT]: @{body('Process_ParseEmail_JSON')?['email_content']?['receiver']}  \n[SUBJECT]: @{body('Process_ParseEmail_JSON')?['email_content']?['subject']}  \n[BODY]: @{body('Process_ParseEmail_JSON')?['email_content']?['body']}  \n[URLS]: @{string(variables('urls'))}\n```\n\n---\n\n**Output Example in JSON Format**:\n\n```json\n{\n  \"email_summary\": {\n    \"description\": \"This section provides a concise summary of the email, including a short description of its content and the subject.\",\n    \"subject\": \"Rental Agreement Details\",\n    \"content_summary\": \"The email provides details about a rental agreement, including attached documents and a link for further confirmation.\"\n  },\n  \"behavioral_triggers\": {\n    \"description\": \"This section identifies emotional or coercive language and classifies the tone of the email (e.g., urgent or neutral), providing justification based on specific phrasing. It evaluates whether the tone and behavioral triggers are appropriate for the email’s stated purpose.\",\n    \"tone\": \"Neutral\",\n    \"justification\": \"The email language is professional and lacks urgency.\",\n    \"alignment_with_purpose\": \"Yes, it aligns with the email’s stated purpose of providing rental information.\"\n  },\n  \"logical_coherence\": {\n    \"description\": \"This section assesses the internal consistency of the email, identifying contradictions, vagueness, or illogical requests. It evaluates whether the actions requested align with the recipient's role and the sender's stated purpose.\",\n    \"is_consistent\": \"TRUE\",\n    \"contradictions_or_vagueness\": \"None identified.\",\n    \"logical_actions\": \"The email requests actions consistent with its purpose.\"\n  },\n  \"intent_verification\": {\n    \"description\": \"This section infers the sender's likely intent by analyzing behavioral cues, stated purpose, and actions requested. It determines whether the email’s requests align with legitimate processes or could lead to harm, such as exposing sensitive information or financial loss.\",\n    \"likely_intent\": \"Provide rental agreement details.\",\n    \"risk_assessment\": \"Minimal risk based on the content and links.\"\n  },\n  \"attachment_analysis\": {\n    \"is_relevant\": \"FALSE\",\n    \"content_analysis\": \"No attachments were included.\",\n    \"risks\": \"NONE\"\n  },\n  \"url_analysis\": {\n    \"description\": \"This section categorizes email URLs into primary actions, informational links, or stylistic/framework elements. It evaluates whether primary URLs are relevant, align with trusted domains, and are essential, while assessing the trustworthiness and purpose of other URL types.\",\n    \"url_categorization\": {\n      \"primary_action_urls\": [\n        \"https://secure-rental-agreements.com\"\n      ],\n      \"informational_urls\": [\n        \"https://privacy.ehi.com\"\n      ],\n      \"stylistic_framework_urls\": [\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\n      ]\n    },\n    \"primary_action_validation\": {\n      \"relevance\": \"TRUE\",\n      \"domain_alignment\": \"TRUE\",\n      \"necessity\": \"TRUE\",\n      \"risks\": \"NONE\"\n    },\n    \"informational_url_validation\": {\n      \"purpose\": \"Privacy policy.\",\n      \"alignment\": \"Matches the sender organization.\",\n      \"risks\": \"NONE\"\n    },\n    \"stylistic_framework_url_validation\": {\n      \"typicality\": \"Consistent with common email formatting.\",\n      \"risks\": \"NONE\"\n    }\n  },\n  \"pretense_vs_intent_mapping\": {\n    \"description\": \"This section compares the email's stated purpose with its true intent, highlighting any gaps or inconsistencies that could indicate deception or misalignment.\",\n    \"stated_purpose\": \"Provide rental agreement details.\",\n    \"true_intent\": \"Provide rental agreement details.\",\n    \"gaps\": \"NONE\"\n  },\n  \"final_assessment\": {\n    \"description\": \"This section provides a high-level assessment of the email's intent, tone, and content, categorizing it as benign, suspicious, or malicious and providing rationale for the decision.\",\n    \"category\": \"BENIGN\",\n    \"rationale\": \"All elements of the email align with its stated purpose and intent.\"\n  }\n}\n```"
                                            },
                                            "path": "/process-prompt"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_ParseEmail_JSON')?['email_content']?['attachments'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Function_normalize_json": {
                            "runAfter": {
                                "Show_results_here": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@outputs('Show_results_here')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName03'))]"
                                }
                            }
                        },
                        "Process_normalize_JSON": {
                            "runAfter": {
                                "Function_normalize_json": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Function_normalize_json')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "behavioral_triggers": {
                                            "type": "object",
                                            "properties": {
                                                "tone": {
                                                    "type": "string"
                                                },
                                                "justification": {
                                                    "type": "string"
                                                },
                                                "alignment_with_purpose": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "logical_coherence": {
                                            "type": "object",
                                            "properties": {
                                                "is_consistent": {
                                                    "type": "string"
                                                },
                                                "contradictions_or_vagueness": {
                                                    "type": "string"
                                                },
                                                "logical_actions": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "intent_verification": {
                                            "type": "object",
                                            "properties": {
                                                "likely_intent": {
                                                    "type": "string"
                                                },
                                                "risk_assessment": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "attachment_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "is_relevant": {
                                                    "type": "string"
                                                },
                                                "content_analysis": {
                                                    "type": "string"
                                                },
                                                "risks": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "url_analysis": {
                                            "type": "object",
                                            "properties": {
                                                "url_categorization": {
                                                    "type": "object",
                                                    "properties": {
                                                        "primary_action_urls": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "informational_urls": {
                                                            "type": "array"
                                                        },
                                                        "stylistic_framework_urls": {
                                                            "type": "array"
                                                        }
                                                    }
                                                },
                                                "primary_action_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "relevance": {
                                                            "type": "string"
                                                        },
                                                        "domain_alignment": {
                                                            "type": "string"
                                                        },
                                                        "necessity": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "informational_url_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "purpose": {
                                                            "type": "string"
                                                        },
                                                        "alignment": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "stylistic_framework_url_validation": {
                                                    "type": "object",
                                                    "properties": {
                                                        "typicality": {
                                                            "type": "string"
                                                        },
                                                        "risks": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "pretense_vs_intent_mapping": {
                                            "type": "object",
                                            "properties": {
                                                "stated_purpose": {
                                                    "type": "string"
                                                },
                                                "true_intent": {
                                                    "type": "string"
                                                },
                                                "gaps": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "final_assessment": {
                                            "type": "object",
                                            "properties": {
                                                "category": {
                                                    "type": "string"
                                                },
                                                "rationale": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Function_json_to_html": {
                            "runAfter": {
                                "Process_normalize_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@body('Process_normalize_JSON')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName04'))]"
                                }
                            }
                        },
                        "Send_an_email_(V2)": {
                            "runAfter": {
                                "Function_json_to_html": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "To": "@triggerBody()?['from']",
                                    "Subject": "Phishing Email Analysis",
                                    "Body": "<p class=\"editor-paragraph\">@{body('Function_json_to_html')}</p>",
                                    "Cc": "[parameters('PhishingReportEmailAddress')]",
                                    "Attachments": [
                                        {
                                            "Name": "original_email.eml",
                                            "ContentBytes": "@base64(variables('raw_email'))"
                                        }
                                    ],
                                    "Importance": "Normal"
                                },
                                "path": "/v2/Mail"
                            }
                        },
                        "Initialize_variable_raw_email": {
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}